++ dirname playground.sh
+ source ./bash-annotations.sh
++ declare -gax BASH_ANNOTATIONS_IMPORT_ARRAY
++ declare -gax BASH_ANNOTATIONS_FUNCTION_ARRAY
++++ dirname -- ./bash-annotations.sh
+++ cd -P -- .
+++ pwd -P
++ declare -gx BASH_ANNOTATIONS_PROJECT_BASE_DIRECTORY=/mnt/c/GitHub/bash-annotations/src/
++ bash_annotations_setup
++ set -o functrace
++ set -o history
++ set_bash_annotations_trap
++ builtin trap bash_annotations_trap_controller DEBUG
++ bash_annotations_trap_controller
+ import interfaces/interface.sh
++ bash_annotations_trap_controller
++ bash_annotations_trap_controller
+ to_source=("${@}")
+ local to_source
+ for script in "${to_source[@]}"
++ bash_annotations_trap_controller
++ bash_annotations_trap_controller
+ _is_imported interfaces/interface.sh
++ bash_annotations_trap_controller
++ bash_annotations_trap_controller
+ local import_requested=interfaces/interface.sh
++ bash_annotations_trap_controller
+ return 1
++ bash_annotations_trap_controller
+ [[ -f /mnt/c/GitHub/bash-annotations/src/interfaces/interface.sh ]]
++ bash_annotations_trap_controller
+ BASH_ANNOTATIONS_IMPORT_ARRAY+=("${script}")
++ bash_annotations_trap_controller
+ builtin source /mnt/c/GitHub/bash-annotations/src/interfaces/interface.sh
+++ bash_annotations_trap_controller
++ import reflection.sh
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ to_source=("${@}")
++ local to_source
++ for script in "${to_source[@]}"
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ _is_imported reflection.sh
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ local import_requested=reflection.sh
++ for imported in "${BASH_ANNOTATIONS_IMPORT_ARRAY[@]}"
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ [[ reflection.sh == \i\n\t\e\r\f\a\c\e\s\/\i\n\t\e\r\f\a\c\e\.\s\h ]]
+++ bash_annotations_trap_controller
++ return 1
+++ bash_annotations_trap_controller
++ [[ -f /mnt/c/GitHub/bash-annotations/src/reflection.sh ]]
+++ bash_annotations_trap_controller
++ BASH_ANNOTATIONS_IMPORT_ARRAY+=("${script}")
+++ bash_annotations_trap_controller
++ builtin source /mnt/c/GitHub/bash-annotations/src/reflection.sh
++++ bash_annotations_trap_controller
+++ import util/utility.sh
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ to_source=("${@}")
+++ local to_source
+++ for script in "${to_source[@]}"
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ _is_imported util/utility.sh
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local import_requested=util/utility.sh
+++ for imported in "${BASH_ANNOTATIONS_IMPORT_ARRAY[@]}"
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ [[ util/utility.sh == \i\n\t\e\r\f\a\c\e\s\/\i\n\t\e\r\f\a\c\e\.\s\h ]]
+++ for imported in "${BASH_ANNOTATIONS_IMPORT_ARRAY[@]}"
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ [[ util/utility.sh == \r\e\f\l\e\c\t\i\o\n\.\s\h ]]
++++ bash_annotations_trap_controller
+++ return 1
++++ bash_annotations_trap_controller
+++ [[ -f /mnt/c/GitHub/bash-annotations/src/util/utility.sh ]]
++++ bash_annotations_trap_controller
+++ BASH_ANNOTATIONS_IMPORT_ARRAY+=("${script}")
++++ bash_annotations_trap_controller
+++ builtin source /mnt/c/GitHub/bash-annotations/src/util/utility.sh
+++ bash_annotations_trap_controller
++ import util/utility.sh
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ to_source=("${@}")
++ local to_source
++ for script in "${to_source[@]}"
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ _is_imported util/utility.sh
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ local import_requested=util/utility.sh
++ for imported in "${BASH_ANNOTATIONS_IMPORT_ARRAY[@]}"
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ [[ util/utility.sh == \i\n\t\e\r\f\a\c\e\s\/\i\n\t\e\r\f\a\c\e\.\s\h ]]
++ for imported in "${BASH_ANNOTATIONS_IMPORT_ARRAY[@]}"
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ [[ util/utility.sh == \r\e\f\l\e\c\t\i\o\n\.\s\h ]]
++ for imported in "${BASH_ANNOTATIONS_IMPORT_ARRAY[@]}"
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ [[ util/utility.sh == \u\t\i\l\/\u\t\i\l\i\t\y\.\s\h ]]
+++ bash_annotations_trap_controller
++ return 0
+++ bash_annotations_trap_controller
++ continue
++ bash_annotations_trap_controller
+ import annotations/variables/element_type.sh
++ bash_annotations_trap_controller
++ bash_annotations_trap_controller
+ to_source=("${@}")
+ local to_source
+ for script in "${to_source[@]}"
++ bash_annotations_trap_controller
++ bash_annotations_trap_controller
+ _is_imported annotations/variables/element_type.sh
++ bash_annotations_trap_controller
++ bash_annotations_trap_controller
+ local import_requested=annotations/variables/element_type.sh
+ for imported in "${BASH_ANNOTATIONS_IMPORT_ARRAY[@]}"
++ bash_annotations_trap_controller
++ bash_annotations_trap_controller
+ [[ annotations/variables/element_type.sh == \i\n\t\e\r\f\a\c\e\s\/\i\n\t\e\r\f\a\c\e\.\s\h ]]
+ for imported in "${BASH_ANNOTATIONS_IMPORT_ARRAY[@]}"
++ bash_annotations_trap_controller
++ bash_annotations_trap_controller
+ [[ annotations/variables/element_type.sh == \r\e\f\l\e\c\t\i\o\n\.\s\h ]]
+ for imported in "${BASH_ANNOTATIONS_IMPORT_ARRAY[@]}"
++ bash_annotations_trap_controller
++ bash_annotations_trap_controller
+ [[ annotations/variables/element_type.sh == \u\t\i\l\/\u\t\i\l\i\t\y\.\s\h ]]
++ bash_annotations_trap_controller
+ return 1
++ bash_annotations_trap_controller
+ [[ -f /mnt/c/GitHub/bash-annotations/src/annotations/variables/element_type.sh ]]
++ bash_annotations_trap_controller
+ BASH_ANNOTATIONS_IMPORT_ARRAY+=("${script}")
++ bash_annotations_trap_controller
+ builtin source /mnt/c/GitHub/bash-annotations/src/annotations/variables/element_type.sh
+++ bash_annotations_trap_controller
++ import interfaces/interface.sh
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ to_source=("${@}")
++ local to_source
++ for script in "${to_source[@]}"
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ _is_imported interfaces/interface.sh
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ local import_requested=interfaces/interface.sh
++ for imported in "${BASH_ANNOTATIONS_IMPORT_ARRAY[@]}"
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ [[ interfaces/interface.sh == \i\n\t\e\r\f\a\c\e\s\/\i\n\t\e\r\f\a\c\e\.\s\h ]]
+++ bash_annotations_trap_controller
++ return 0
+++ bash_annotations_trap_controller
++ continue
+++ bash_annotations_trap_controller
++ import util/types.sh
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ to_source=("${@}")
++ local to_source
++ for script in "${to_source[@]}"
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ _is_imported util/types.sh
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ local import_requested=util/types.sh
++ for imported in "${BASH_ANNOTATIONS_IMPORT_ARRAY[@]}"
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ [[ util/types.sh == \i\n\t\e\r\f\a\c\e\s\/\i\n\t\e\r\f\a\c\e\.\s\h ]]
++ for imported in "${BASH_ANNOTATIONS_IMPORT_ARRAY[@]}"
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ [[ util/types.sh == \r\e\f\l\e\c\t\i\o\n\.\s\h ]]
++ for imported in "${BASH_ANNOTATIONS_IMPORT_ARRAY[@]}"
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ [[ util/types.sh == \u\t\i\l\/\u\t\i\l\i\t\y\.\s\h ]]
++ for imported in "${BASH_ANNOTATIONS_IMPORT_ARRAY[@]}"
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ [[ util/types.sh == \a\n\n\o\t\a\t\i\o\n\s\/\v\a\r\i\a\b\l\e\s\/\e\l\e\m\e\n\t\_\t\y\p\e\.\s\h ]]
+++ bash_annotations_trap_controller
++ return 1
+++ bash_annotations_trap_controller
++ [[ -f /mnt/c/GitHub/bash-annotations/src/util/types.sh ]]
+++ bash_annotations_trap_controller
++ BASH_ANNOTATIONS_IMPORT_ARRAY+=("${script}")
+++ bash_annotations_trap_controller
++ builtin source /mnt/c/GitHub/bash-annotations/src/util/types.sh
+++ bash_annotations_trap_controller
++ @interface VARIABLE PRE
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ annotated_type VARIABLE
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ local type=VARIABLE
++ case "${type}" in
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ return 0
+++ bash_annotations_trap_controller
++ local type=VARIABLE
+++ bash_annotations_trap_controller
++ trigger PRE
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ local trigger=PRE
++ case "${trigger}" in
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ return 0
+++ bash_annotations_trap_controller
++ local trigger=PRE
+++ bash_annotations_trap_controller
++ local get_annotated_target
+++ bash_annotations_trap_controller
++ local annotation_target
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ realpath /mnt/c/GitHub/bash-annotations/src/annotations/variables/element_type.sh
++ local source_file=/mnt/c/GitHub/bash-annotations/src/annotations/variables/element_type.sh
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ get_annotated_function /mnt/c/GitHub/bash-annotations/src/annotations/variables/element_type.sh
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local source_file=/mnt/c/GitHub/bash-annotations/src/annotations/variables/element_type.sh
++++ bash_annotations_trap_controller
+++ local annotation=@interface
++++ bash_annotations_trap_controller
+++ local annotation_length=10
++++ bash_annotations_trap_controller
+++ local line_start=5
++++ bash_annotations_trap_controller
+++ local counter=0
++++ bash_annotations_trap_controller
+++ local start=false
++++ bash_annotations_trap_controller
+++ local 'function_pattern=^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$'
++++ bash_annotations_trap_controller
+++ local 'annotations_pattern=^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$'
++++ bash_annotations_trap_controller
+++ local 'comment_pattern=^\s*#.*$'
++++ bash_annotations_trap_controller
+++ IFS=
+++ read -r line
++++ bash_annotations_trap_controller
+++ (( counter++ ))
++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ trim 'import interfaces/interface.sh '
+++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ local 'var=import interfaces/interface.sh '
+++++ bash_annotations_trap_controller
++++ var='import interfaces/interface.sh '
+++++ bash_annotations_trap_controller
++++ var='import interfaces/interface.sh'
+++++ bash_annotations_trap_controller
++++ echo 'import interfaces/interface.sh'
+++ line='import interfaces/interface.sh'
++++ bash_annotations_trap_controller
+++ [[ 1 -eq 5 ]]
++++ bash_annotations_trap_controller
+++ [[ import interfaces/interface.sh =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
++++ bash_annotations_trap_controller
+++ [[ import interfaces/interface.sh =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
++++ bash_annotations_trap_controller
+++ [[ import interfaces/interface.sh =~ ^\s*#.*$ ]]
++++ bash_annotations_trap_controller
+++ [[ ! import interfaces/interface.sh =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
++++ bash_annotations_trap_controller
+++ [[ false == \t\r\u\e ]]
++++ bash_annotations_trap_controller
+++ continue
++++ bash_annotations_trap_controller
+++ IFS=
+++ read -r line
++++ bash_annotations_trap_controller
+++ (( counter++ ))
++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ trim 'import util/types.sh'
+++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ local 'var=import util/types.sh'
+++++ bash_annotations_trap_controller
++++ var='import util/types.sh'
+++++ bash_annotations_trap_controller
++++ var='import util/types.sh'
+++++ bash_annotations_trap_controller
++++ echo 'import util/types.sh'
+++ line='import util/types.sh'
++++ bash_annotations_trap_controller
+++ [[ 2 -eq 5 ]]
++++ bash_annotations_trap_controller
+++ [[ import util/types.sh =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
++++ bash_annotations_trap_controller
+++ [[ import util/types.sh =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
++++ bash_annotations_trap_controller
+++ [[ import util/types.sh =~ ^\s*#.*$ ]]
++++ bash_annotations_trap_controller
+++ [[ ! import util/types.sh =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
++++ bash_annotations_trap_controller
+++ [[ false == \t\r\u\e ]]
++++ bash_annotations_trap_controller
+++ continue
++++ bash_annotations_trap_controller
+++ IFS=
+++ read -r line
++++ bash_annotations_trap_controller
+++ (( counter++ ))
++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ trim ''
+++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ local var=
+++++ bash_annotations_trap_controller
++++ var=
+++++ bash_annotations_trap_controller
++++ var=
+++++ bash_annotations_trap_controller
++++ echo ''
+++ line=
++++ bash_annotations_trap_controller
+++ [[ 3 -eq 5 ]]
++++ bash_annotations_trap_controller
+++ [[ '' =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
++++ bash_annotations_trap_controller
+++ [[ '' =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
++++ bash_annotations_trap_controller
+++ [[ '' =~ ^\s*#.*$ ]]
++++ bash_annotations_trap_controller
+++ [[ ! '' =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
++++ bash_annotations_trap_controller
+++ [[ false == \t\r\u\e ]]
++++ bash_annotations_trap_controller
+++ continue
++++ bash_annotations_trap_controller
+++ IFS=
+++ read -r line
++++ bash_annotations_trap_controller
+++ (( counter++ ))
++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ trim ''
+++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ local var=
+++++ bash_annotations_trap_controller
++++ var=
+++++ bash_annotations_trap_controller
++++ var=
+++++ bash_annotations_trap_controller
++++ echo ''
+++ line=
++++ bash_annotations_trap_controller
+++ [[ 4 -eq 5 ]]
++++ bash_annotations_trap_controller
+++ [[ '' =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
++++ bash_annotations_trap_controller
+++ [[ '' =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
++++ bash_annotations_trap_controller
+++ [[ '' =~ ^\s*#.*$ ]]
++++ bash_annotations_trap_controller
+++ [[ ! '' =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
++++ bash_annotations_trap_controller
+++ [[ false == \t\r\u\e ]]
++++ bash_annotations_trap_controller
+++ continue
++++ bash_annotations_trap_controller
+++ IFS=
+++ read -r line
++++ bash_annotations_trap_controller
+++ (( counter++ ))
++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ trim '@interface VARIABLE PRE'
+++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ local 'var=@interface VARIABLE PRE'
+++++ bash_annotations_trap_controller
++++ var='@interface VARIABLE PRE'
+++++ bash_annotations_trap_controller
++++ var='@interface VARIABLE PRE'
+++++ bash_annotations_trap_controller
++++ echo '@interface VARIABLE PRE'
+++ line='@interface VARIABLE PRE'
++++ bash_annotations_trap_controller
+++ [[ 5 -eq 5 ]]
++++ bash_annotations_trap_controller
+++ [[ @interface == \@\i\n\t\e\r\f\a\c\e ]]
++++ bash_annotations_trap_controller
+++ start=true
++++ bash_annotations_trap_controller
+++ continue
++++ bash_annotations_trap_controller
+++ IFS=
+++ read -r line
++++ bash_annotations_trap_controller
+++ (( counter++ ))
++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ trim '# Enforces strong typing at runtime for an annotated type.'
+++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ local 'var=# Enforces strong typing at runtime for an annotated type.'
+++++ bash_annotations_trap_controller
++++ var='# Enforces strong typing at runtime for an annotated type.'
+++++ bash_annotations_trap_controller
++++ var='# Enforces strong typing at runtime for an annotated type.'
+++++ bash_annotations_trap_controller
++++ echo '# Enforces strong typing at runtime for an annotated type.'
+++ line='# Enforces strong typing at runtime for an annotated type.'
++++ bash_annotations_trap_controller
+++ [[ 6 -eq 5 ]]
++++ bash_annotations_trap_controller
+++ [[ # Enforces strong typing at runtime for an annotated type. =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
++++ bash_annotations_trap_controller
+++ [[ # Enforces strong typing at runtime for an annotated type. =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
++++ bash_annotations_trap_controller
+++ [[ # Enforces strong typing at runtime for an annotated type. =~ ^\s*#.*$ ]]
++++ bash_annotations_trap_controller
+++ [[ true == \t\r\u\e ]]
++++ bash_annotations_trap_controller
+++ continue
++++ bash_annotations_trap_controller
+++ IFS=
+++ read -r line
++++ bash_annotations_trap_controller
+++ (( counter++ ))
++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ trim '#'
+++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ local var=#
+++++ bash_annotations_trap_controller
++++ var='#'
+++++ bash_annotations_trap_controller
++++ var='#'
+++++ bash_annotations_trap_controller
++++ echo '#'
+++ line='#'
++++ bash_annotations_trap_controller
+++ [[ 7 -eq 5 ]]
++++ bash_annotations_trap_controller
+++ [[ # =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
++++ bash_annotations_trap_controller
+++ [[ # =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
++++ bash_annotations_trap_controller
+++ [[ # =~ ^\s*#.*$ ]]
++++ bash_annotations_trap_controller
+++ [[ true == \t\r\u\e ]]
++++ bash_annotations_trap_controller
+++ continue
++++ bash_annotations_trap_controller
+++ IFS=
+++ read -r line
++++ bash_annotations_trap_controller
+++ (( counter++ ))
++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ trim '# Both variable and command types (e.g. "FUNCTION") can be enforced. '
+++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ local 'var=# Both variable and command types (e.g. "FUNCTION") can be enforced. '
+++++ bash_annotations_trap_controller
++++ var='# Both variable and command types (e.g. "FUNCTION") can be enforced. '
+++++ bash_annotations_trap_controller
++++ var='# Both variable and command types (e.g. "FUNCTION") can be enforced.'
+++++ bash_annotations_trap_controller
++++ echo '# Both variable and command types (e.g. "FUNCTION") can be enforced.'
+++ line='# Both variable and command types (e.g. "FUNCTION") can be enforced.'
++++ bash_annotations_trap_controller
+++ [[ 8 -eq 5 ]]
++++ bash_annotations_trap_controller
+++ [[ # Both variable and command types (e.g. "FUNCTION") can be enforced. =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
++++ bash_annotations_trap_controller
+++ [[ # Both variable and command types (e.g. "FUNCTION") can be enforced. =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
++++ bash_annotations_trap_controller
+++ [[ # Both variable and command types (e.g. "FUNCTION") can be enforced. =~ ^\s*#.*$ ]]
++++ bash_annotations_trap_controller
+++ [[ true == \t\r\u\e ]]
++++ bash_annotations_trap_controller
+++ continue
++++ bash_annotations_trap_controller
+++ IFS=
+++ read -r line
++++ bash_annotations_trap_controller
+++ (( counter++ ))
++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ trim '# Annotate variable declaration and/or initialisation. This annotation evaluates '
+++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ local 'var=# Annotate variable declaration and/or initialisation. This annotation evaluates '
+++++ bash_annotations_trap_controller
++++ var='# Annotate variable declaration and/or initialisation. This annotation evaluates '
+++++ bash_annotations_trap_controller
++++ var='# Annotate variable declaration and/or initialisation. This annotation evaluates'
+++++ bash_annotations_trap_controller
++++ echo '# Annotate variable declaration and/or initialisation. This annotation evaluates'
+++ line='# Annotate variable declaration and/or initialisation. This annotation evaluates'
++++ bash_annotations_trap_controller
+++ [[ 9 -eq 5 ]]
++++ bash_annotations_trap_controller
+++ [[ # Annotate variable declaration and/or initialisation. This annotation evaluates =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
++++ bash_annotations_trap_controller
+++ [[ # Annotate variable declaration and/or initialisation. This annotation evaluates =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
++++ bash_annotations_trap_controller
+++ [[ # Annotate variable declaration and/or initialisation. This annotation evaluates =~ ^\s*#.*$ ]]
++++ bash_annotations_trap_controller
+++ [[ true == \t\r\u\e ]]
++++ bash_annotations_trap_controller
+++ continue
++++ bash_annotations_trap_controller
+++ IFS=
+++ read -r line
++++ bash_annotations_trap_controller
+++ (( counter++ ))
++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ trim '# lazily, and will perform type checking when the annotated variable is called.'
+++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ local 'var=# lazily, and will perform type checking when the annotated variable is called.'
+++++ bash_annotations_trap_controller
++++ var='# lazily, and will perform type checking when the annotated variable is called.'
+++++ bash_annotations_trap_controller
++++ var='# lazily, and will perform type checking when the annotated variable is called.'
+++++ bash_annotations_trap_controller
++++ echo '# lazily, and will perform type checking when the annotated variable is called.'
+++ line='# lazily, and will perform type checking when the annotated variable is called.'
++++ bash_annotations_trap_controller
+++ [[ 10 -eq 5 ]]
++++ bash_annotations_trap_controller
+++ [[ # lazily, and will perform type checking when the annotated variable is called. =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
++++ bash_annotations_trap_controller
+++ [[ # lazily, and will perform type checking when the annotated variable is called. =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
++++ bash_annotations_trap_controller
+++ [[ # lazily, and will perform type checking when the annotated variable is called. =~ ^\s*#.*$ ]]
++++ bash_annotations_trap_controller
+++ [[ true == \t\r\u\e ]]
++++ bash_annotations_trap_controller
+++ continue
++++ bash_annotations_trap_controller
+++ IFS=
+++ read -r line
++++ bash_annotations_trap_controller
+++ (( counter++ ))
++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ trim '#'
+++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ local var=#
+++++ bash_annotations_trap_controller
++++ var='#'
+++++ bash_annotations_trap_controller
++++ var='#'
+++++ bash_annotations_trap_controller
++++ echo '#'
+++ line='#'
++++ bash_annotations_trap_controller
+++ [[ 11 -eq 5 ]]
++++ bash_annotations_trap_controller
+++ [[ # =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
++++ bash_annotations_trap_controller
+++ [[ # =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
++++ bash_annotations_trap_controller
+++ [[ # =~ ^\s*#.*$ ]]
++++ bash_annotations_trap_controller
+++ [[ true == \t\r\u\e ]]
++++ bash_annotations_trap_controller
+++ continue
++++ bash_annotations_trap_controller
+++ IFS=
+++ read -r line
++++ bash_annotations_trap_controller
+++ (( counter++ ))
++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ trim '# Parameter 1: Variable or command type'
+++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ local 'var=# Parameter 1: Variable or command type'
+++++ bash_annotations_trap_controller
++++ var='# Parameter 1: Variable or command type'
+++++ bash_annotations_trap_controller
++++ var='# Parameter 1: Variable or command type'
+++++ bash_annotations_trap_controller
++++ echo '# Parameter 1: Variable or command type'
+++ line='# Parameter 1: Variable or command type'
++++ bash_annotations_trap_controller
+++ [[ 12 -eq 5 ]]
++++ bash_annotations_trap_controller
+++ [[ # Parameter 1: Variable or command type =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
++++ bash_annotations_trap_controller
+++ [[ # Parameter 1: Variable or command type =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
++++ bash_annotations_trap_controller
+++ [[ # Parameter 1: Variable or command type =~ ^\s*#.*$ ]]
++++ bash_annotations_trap_controller
+++ [[ true == \t\r\u\e ]]
++++ bash_annotations_trap_controller
+++ continue
++++ bash_annotations_trap_controller
+++ IFS=
+++ read -r line
++++ bash_annotations_trap_controller
+++ (( counter++ ))
++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ trim '#'
+++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ local var=#
+++++ bash_annotations_trap_controller
++++ var='#'
+++++ bash_annotations_trap_controller
++++ var='#'
+++++ bash_annotations_trap_controller
++++ echo '#'
+++ line='#'
++++ bash_annotations_trap_controller
+++ [[ 13 -eq 5 ]]
++++ bash_annotations_trap_controller
+++ [[ # =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
++++ bash_annotations_trap_controller
+++ [[ # =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
++++ bash_annotations_trap_controller
+++ [[ # =~ ^\s*#.*$ ]]
++++ bash_annotations_trap_controller
+++ [[ true == \t\r\u\e ]]
++++ bash_annotations_trap_controller
+++ continue
++++ bash_annotations_trap_controller
+++ IFS=
+++ read -r line
++++ bash_annotations_trap_controller
+++ (( counter++ ))
++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ trim '# Valid values:'
+++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ local 'var=# Valid values:'
+++++ bash_annotations_trap_controller
++++ var='# Valid values:'
+++++ bash_annotations_trap_controller
++++ var='# Valid values:'
+++++ bash_annotations_trap_controller
++++ echo '# Valid values:'
+++ line='# Valid values:'
++++ bash_annotations_trap_controller
+++ [[ 14 -eq 5 ]]
++++ bash_annotations_trap_controller
+++ [[ # Valid values: =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
++++ bash_annotations_trap_controller
+++ [[ # Valid values: =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
++++ bash_annotations_trap_controller
+++ [[ # Valid values: =~ ^\s*#.*$ ]]
++++ bash_annotations_trap_controller
+++ [[ true == \t\r\u\e ]]
++++ bash_annotations_trap_controller
+++ continue
++++ bash_annotations_trap_controller
+++ IFS=
+++ read -r line
++++ bash_annotations_trap_controller
+++ (( counter++ ))
++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ trim '# '
+++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ local 'var=# '
+++++ bash_annotations_trap_controller
++++ var='# '
+++++ bash_annotations_trap_controller
++++ var='#'
+++++ bash_annotations_trap_controller
++++ echo '#'
+++ line='#'
++++ bash_annotations_trap_controller
+++ [[ 15 -eq 5 ]]
++++ bash_annotations_trap_controller
+++ [[ # =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
++++ bash_annotations_trap_controller
+++ [[ # =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
++++ bash_annotations_trap_controller
+++ [[ # =~ ^\s*#.*$ ]]
++++ bash_annotations_trap_controller
+++ [[ true == \t\r\u\e ]]
++++ bash_annotations_trap_controller
+++ continue
++++ bash_annotations_trap_controller
+++ IFS=
+++ read -r line
++++ bash_annotations_trap_controller
+++ (( counter++ ))
++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ trim '# Variables: STRING, ARRAY, ASSOCIATIVE, INTEGER, NAMEREF'
+++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ local 'var=# Variables: STRING, ARRAY, ASSOCIATIVE, INTEGER, NAMEREF'
+++++ bash_annotations_trap_controller
++++ var='# Variables: STRING, ARRAY, ASSOCIATIVE, INTEGER, NAMEREF'
+++++ bash_annotations_trap_controller
++++ var='# Variables: STRING, ARRAY, ASSOCIATIVE, INTEGER, NAMEREF'
+++++ bash_annotations_trap_controller
++++ echo '# Variables: STRING, ARRAY, ASSOCIATIVE, INTEGER, NAMEREF'
+++ line='# Variables: STRING, ARRAY, ASSOCIATIVE, INTEGER, NAMEREF'
++++ bash_annotations_trap_controller
+++ [[ 16 -eq 5 ]]
++++ bash_annotations_trap_controller
+++ [[ # Variables: STRING, ARRAY, ASSOCIATIVE, INTEGER, NAMEREF =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
++++ bash_annotations_trap_controller
+++ [[ # Variables: STRING, ARRAY, ASSOCIATIVE, INTEGER, NAMEREF =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
++++ bash_annotations_trap_controller
+++ [[ # Variables: STRING, ARRAY, ASSOCIATIVE, INTEGER, NAMEREF =~ ^\s*#.*$ ]]
++++ bash_annotations_trap_controller
+++ [[ true == \t\r\u\e ]]
++++ bash_annotations_trap_controller
+++ continue
++++ bash_annotations_trap_controller
+++ IFS=
+++ read -r line
++++ bash_annotations_trap_controller
+++ (( counter++ ))
++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ trim '#'
+++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ local var=#
+++++ bash_annotations_trap_controller
++++ var='#'
+++++ bash_annotations_trap_controller
++++ var='#'
+++++ bash_annotations_trap_controller
++++ echo '#'
+++ line='#'
++++ bash_annotations_trap_controller
+++ [[ 17 -eq 5 ]]
++++ bash_annotations_trap_controller
+++ [[ # =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
++++ bash_annotations_trap_controller
+++ [[ # =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
++++ bash_annotations_trap_controller
+++ [[ # =~ ^\s*#.*$ ]]
++++ bash_annotations_trap_controller
+++ [[ true == \t\r\u\e ]]
++++ bash_annotations_trap_controller
+++ continue
++++ bash_annotations_trap_controller
+++ IFS=
+++ read -r line
++++ bash_annotations_trap_controller
+++ (( counter++ ))
++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ trim '# Commands: ALIAS, KEYWORD, FUNCTION, BUILTIN, FILE'
+++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ local 'var=# Commands: ALIAS, KEYWORD, FUNCTION, BUILTIN, FILE'
+++++ bash_annotations_trap_controller
++++ var='# Commands: ALIAS, KEYWORD, FUNCTION, BUILTIN, FILE'
+++++ bash_annotations_trap_controller
++++ var='# Commands: ALIAS, KEYWORD, FUNCTION, BUILTIN, FILE'
+++++ bash_annotations_trap_controller
++++ echo '# Commands: ALIAS, KEYWORD, FUNCTION, BUILTIN, FILE'
+++ line='# Commands: ALIAS, KEYWORD, FUNCTION, BUILTIN, FILE'
++++ bash_annotations_trap_controller
+++ [[ 18 -eq 5 ]]
++++ bash_annotations_trap_controller
+++ [[ # Commands: ALIAS, KEYWORD, FUNCTION, BUILTIN, FILE =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
++++ bash_annotations_trap_controller
+++ [[ # Commands: ALIAS, KEYWORD, FUNCTION, BUILTIN, FILE =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
++++ bash_annotations_trap_controller
+++ [[ # Commands: ALIAS, KEYWORD, FUNCTION, BUILTIN, FILE =~ ^\s*#.*$ ]]
++++ bash_annotations_trap_controller
+++ [[ true == \t\r\u\e ]]
++++ bash_annotations_trap_controller
+++ continue
++++ bash_annotations_trap_controller
+++ IFS=
+++ read -r line
++++ bash_annotations_trap_controller
+++ (( counter++ ))
++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ trim '#'
+++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ local var=#
+++++ bash_annotations_trap_controller
++++ var='#'
+++++ bash_annotations_trap_controller
++++ var='#'
+++++ bash_annotations_trap_controller
++++ echo '#'
+++ line='#'
++++ bash_annotations_trap_controller
+++ [[ 19 -eq 5 ]]
++++ bash_annotations_trap_controller
+++ [[ # =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
++++ bash_annotations_trap_controller
+++ [[ # =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
++++ bash_annotations_trap_controller
+++ [[ # =~ ^\s*#.*$ ]]
++++ bash_annotations_trap_controller
+++ [[ true == \t\r\u\e ]]
++++ bash_annotations_trap_controller
+++ continue
++++ bash_annotations_trap_controller
+++ IFS=
+++ read -r line
++++ bash_annotations_trap_controller
+++ (( counter++ ))
++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ trim '# Notes: '
+++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ local 'var=# Notes: '
+++++ bash_annotations_trap_controller
++++ var='# Notes: '
+++++ bash_annotations_trap_controller
++++ var='# Notes:'
+++++ bash_annotations_trap_controller
++++ echo '# Notes:'
+++ line='# Notes:'
++++ bash_annotations_trap_controller
+++ [[ 20 -eq 5 ]]
++++ bash_annotations_trap_controller
+++ [[ # Notes: =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
++++ bash_annotations_trap_controller
+++ [[ # Notes: =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
++++ bash_annotations_trap_controller
+++ [[ # Notes: =~ ^\s*#.*$ ]]
++++ bash_annotations_trap_controller
+++ [[ true == \t\r\u\e ]]
++++ bash_annotations_trap_controller
+++ continue
++++ bash_annotations_trap_controller
+++ IFS=
+++ read -r line
++++ bash_annotations_trap_controller
+++ (( counter++ ))
++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ trim '# '
+++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ local 'var=# '
+++++ bash_annotations_trap_controller
++++ var='# '
+++++ bash_annotations_trap_controller
++++ var='#'
+++++ bash_annotations_trap_controller
++++ echo '#'
+++ line='#'
++++ bash_annotations_trap_controller
+++ [[ 21 -eq 5 ]]
++++ bash_annotations_trap_controller
+++ [[ # =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
++++ bash_annotations_trap_controller
+++ [[ # =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
++++ bash_annotations_trap_controller
+++ [[ # =~ ^\s*#.*$ ]]
++++ bash_annotations_trap_controller
+++ [[ true == \t\r\u\e ]]
++++ bash_annotations_trap_controller
+++ continue
++++ bash_annotations_trap_controller
+++ IFS=
+++ read -r line
++++ bash_annotations_trap_controller
+++ (( counter++ ))
++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ trim '# ASSOCIATE=Associative array'
+++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ local 'var=# ASSOCIATE=Associative array'
+++++ bash_annotations_trap_controller
++++ var='# ASSOCIATE=Associative array'
+++++ bash_annotations_trap_controller
++++ var='# ASSOCIATE=Associative array'
+++++ bash_annotations_trap_controller
++++ echo '# ASSOCIATE=Associative array'
+++ line='# ASSOCIATE=Associative array'
++++ bash_annotations_trap_controller
+++ [[ 22 -eq 5 ]]
++++ bash_annotations_trap_controller
+++ [[ # ASSOCIATE=Associative array =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
++++ bash_annotations_trap_controller
+++ [[ # ASSOCIATE=Associative array =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
++++ bash_annotations_trap_controller
+++ [[ # ASSOCIATE=Associative array =~ ^\s*#.*$ ]]
++++ bash_annotations_trap_controller
+++ [[ true == \t\r\u\e ]]
++++ bash_annotations_trap_controller
+++ continue
++++ bash_annotations_trap_controller
+++ IFS=
+++ read -r line
++++ bash_annotations_trap_controller
+++ (( counter++ ))
++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ trim '# '
+++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ local 'var=# '
+++++ bash_annotations_trap_controller
++++ var='# '
+++++ bash_annotations_trap_controller
++++ var='#'
+++++ bash_annotations_trap_controller
++++ echo '#'
+++ line='#'
++++ bash_annotations_trap_controller
+++ [[ 23 -eq 5 ]]
++++ bash_annotations_trap_controller
+++ [[ # =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
++++ bash_annotations_trap_controller
+++ [[ # =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
++++ bash_annotations_trap_controller
+++ [[ # =~ ^\s*#.*$ ]]
++++ bash_annotations_trap_controller
+++ [[ true == \t\r\u\e ]]
++++ bash_annotations_trap_controller
+++ continue
++++ bash_annotations_trap_controller
+++ IFS=
+++ read -r line
++++ bash_annotations_trap_controller
+++ (( counter++ ))
++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ trim '# If the type a name refereced (-n) variable is to be enforced, then annotate with'
+++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ local 'var=# If the type a name refereced (-n) variable is to be enforced, then annotate with'
+++++ bash_annotations_trap_controller
++++ var='# If the type a name refereced (-n) variable is to be enforced, then annotate with'
+++++ bash_annotations_trap_controller
++++ var='# If the type a name refereced (-n) variable is to be enforced, then annotate with'
+++++ bash_annotations_trap_controller
++++ echo '# If the type a name refereced (-n) variable is to be enforced, then annotate with'
+++ line='# If the type a name refereced (-n) variable is to be enforced, then annotate with'
++++ bash_annotations_trap_controller
+++ [[ 24 -eq 5 ]]
++++ bash_annotations_trap_controller
+++ [[ # If the type a name refereced (-n) variable is to be enforced, then annotate with =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
++++ bash_annotations_trap_controller
+++ [[ # If the type a name refereced (-n) variable is to be enforced, then annotate with =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
++++ bash_annotations_trap_controller
+++ [[ # If the type a name refereced (-n) variable is to be enforced, then annotate with =~ ^\s*#.*$ ]]
++++ bash_annotations_trap_controller
+++ [[ true == \t\r\u\e ]]
++++ bash_annotations_trap_controller
+++ continue
++++ bash_annotations_trap_controller
+++ IFS=
+++ read -r line
++++ bash_annotations_trap_controller
+++ (( counter++ ))
++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ trim '# the actual variable type. '
+++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ local 'var=# the actual variable type. '
+++++ bash_annotations_trap_controller
++++ var='# the actual variable type. '
+++++ bash_annotations_trap_controller
++++ var='# the actual variable type.'
+++++ bash_annotations_trap_controller
++++ echo '# the actual variable type.'
+++ line='# the actual variable type.'
++++ bash_annotations_trap_controller
+++ [[ 25 -eq 5 ]]
++++ bash_annotations_trap_controller
+++ [[ # the actual variable type. =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
++++ bash_annotations_trap_controller
+++ [[ # the actual variable type. =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
++++ bash_annotations_trap_controller
+++ [[ # the actual variable type. =~ ^\s*#.*$ ]]
++++ bash_annotations_trap_controller
+++ [[ true == \t\r\u\e ]]
++++ bash_annotations_trap_controller
+++ continue
++++ bash_annotations_trap_controller
+++ IFS=
+++ read -r line
++++ bash_annotations_trap_controller
+++ (( counter++ ))
++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ trim '# '
+++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ local 'var=# '
+++++ bash_annotations_trap_controller
++++ var='# '
+++++ bash_annotations_trap_controller
++++ var='#'
+++++ bash_annotations_trap_controller
++++ echo '#'
+++ line='#'
++++ bash_annotations_trap_controller
+++ [[ 26 -eq 5 ]]
++++ bash_annotations_trap_controller
+++ [[ # =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
++++ bash_annotations_trap_controller
+++ [[ # =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
++++ bash_annotations_trap_controller
+++ [[ # =~ ^\s*#.*$ ]]
++++ bash_annotations_trap_controller
+++ [[ true == \t\r\u\e ]]
++++ bash_annotations_trap_controller
+++ continue
++++ bash_annotations_trap_controller
+++ IFS=
+++ read -r line
++++ bash_annotations_trap_controller
+++ (( counter++ ))
++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ trim '# If the intended type is indeed -n, specify NAMEREF. '
+++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ local 'var=# If the intended type is indeed -n, specify NAMEREF. '
+++++ bash_annotations_trap_controller
++++ var='# If the intended type is indeed -n, specify NAMEREF. '
+++++ bash_annotations_trap_controller
++++ var='# If the intended type is indeed -n, specify NAMEREF.'
+++++ bash_annotations_trap_controller
++++ echo '# If the intended type is indeed -n, specify NAMEREF.'
+++ line='# If the intended type is indeed -n, specify NAMEREF.'
++++ bash_annotations_trap_controller
+++ [[ 27 -eq 5 ]]
++++ bash_annotations_trap_controller
+++ [[ # If the intended type is indeed -n, specify NAMEREF. =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
++++ bash_annotations_trap_controller
+++ [[ # If the intended type is indeed -n, specify NAMEREF. =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
++++ bash_annotations_trap_controller
+++ [[ # If the intended type is indeed -n, specify NAMEREF. =~ ^\s*#.*$ ]]
++++ bash_annotations_trap_controller
+++ [[ true == \t\r\u\e ]]
++++ bash_annotations_trap_controller
+++ continue
++++ bash_annotations_trap_controller
+++ IFS=
+++ read -r line
++++ bash_annotations_trap_controller
+++ (( counter++ ))
++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ trim 'element_type() {'
+++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ local 'var=element_type() {'
+++++ bash_annotations_trap_controller
++++ var='element_type() {'
+++++ bash_annotations_trap_controller
++++ var='element_type() {'
+++++ bash_annotations_trap_controller
++++ echo 'element_type() {'
+++ line='element_type() {'
++++ bash_annotations_trap_controller
+++ [[ 28 -eq 5 ]]
++++ bash_annotations_trap_controller
+++ [[ element_type() { =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
++++ bash_annotations_trap_controller
+++ [[ true == \t\r\u\e ]]
++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ trim 'element_type() {'
+++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ local 'var=element_type() {'
+++++ bash_annotations_trap_controller
++++ var='element_type() {'
+++++ bash_annotations_trap_controller
++++ var='element_type() {'
+++++ bash_annotations_trap_controller
++++ echo 'element_type() {'
+++ match='element_type() {'
++++ bash_annotations_trap_controller
+++ echo element_type
++++ bash_annotations_trap_controller
+++ return 0
++ annotation_target=element_type
+++ bash_annotations_trap_controller
++ [[ -n element_type ]]
+++ bash_annotations_trap_controller
++ local function_body
+++ bash_annotations_trap_controller
++ get_annotated_function_body function_body /mnt/c/GitHub/bash-annotations/src/annotations/variables/element_type.sh
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ local -n function_body_string=function_body
+++ bash_annotations_trap_controller
++ local -a function_body_array
+++ bash_annotations_trap_controller
++ local source_file=/mnt/c/GitHub/bash-annotations/src/annotations/variables/element_type.sh
+++ bash_annotations_trap_controller
++ local annotation=@interface
+++ bash_annotations_trap_controller
++ local annotation_length=10
+++ bash_annotations_trap_controller
++ local line_start=5
+++ bash_annotations_trap_controller
++ local counter=0
+++ bash_annotations_trap_controller
++ local start=false
+++ bash_annotations_trap_controller
++ local parse_body=false
+++ bash_annotations_trap_controller
++ local 'function_pattern=^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$'
+++ bash_annotations_trap_controller
++ local 'end_of_function_pattern=^\s*\}\s*$'
+++ bash_annotations_trap_controller
++ local 'annotations_pattern=^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$'
+++ bash_annotations_trap_controller
++ local 'comment_pattern=^\s*#.*$'
+++ bash_annotations_trap_controller
++ local 'reserved_namespace_annotated_function=${annotated_function}'
+++ bash_annotations_trap_controller
++ local 'reserved_namespace_annotated_variable=${annotated_variable}'
+++ bash_annotations_trap_controller
++ local 'positional_parameters_pattern=$[1-9]'
+++ bash_annotations_trap_controller
++ local 'positional_parameters_pattern_braces=${[1-9]'
+++ bash_annotations_trap_controller
++ local 'array_parameter_pattern=$@'
+++ bash_annotations_trap_controller
++ local 'array_parameter_pattern_braces=${@'
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim 'import interfaces/interface.sh '
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=import interfaces/interface.sh '
++++ bash_annotations_trap_controller
+++ var='import interfaces/interface.sh '
++++ bash_annotations_trap_controller
+++ var='import interfaces/interface.sh'
++++ bash_annotations_trap_controller
+++ echo 'import interfaces/interface.sh'
++ line='import interfaces/interface.sh'
+++ bash_annotations_trap_controller
++ [[ 1 -eq 5 ]]
+++ bash_annotations_trap_controller
++ [[ import interfaces/interface.sh =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ import interfaces/interface.sh =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ import interfaces/interface.sh =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ false == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ ! import interfaces/interface.sh =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ false == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ continue
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim 'import util/types.sh'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=import util/types.sh'
++++ bash_annotations_trap_controller
+++ var='import util/types.sh'
++++ bash_annotations_trap_controller
+++ var='import util/types.sh'
++++ bash_annotations_trap_controller
+++ echo 'import util/types.sh'
++ line='import util/types.sh'
+++ bash_annotations_trap_controller
++ [[ 2 -eq 5 ]]
+++ bash_annotations_trap_controller
++ [[ import util/types.sh =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ import util/types.sh =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ import util/types.sh =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ false == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ ! import util/types.sh =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ false == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ continue
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim ''
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local var=
++++ bash_annotations_trap_controller
+++ var=
++++ bash_annotations_trap_controller
+++ var=
++++ bash_annotations_trap_controller
+++ echo ''
++ line=
+++ bash_annotations_trap_controller
++ [[ 3 -eq 5 ]]
+++ bash_annotations_trap_controller
++ [[ '' =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ '' =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ '' =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ false == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ ! '' =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ false == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ continue
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim ''
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local var=
++++ bash_annotations_trap_controller
+++ var=
++++ bash_annotations_trap_controller
+++ var=
++++ bash_annotations_trap_controller
+++ echo ''
++ line=
+++ bash_annotations_trap_controller
++ [[ 4 -eq 5 ]]
+++ bash_annotations_trap_controller
++ [[ '' =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ '' =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ '' =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ false == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ ! '' =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ false == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ continue
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '@interface VARIABLE PRE'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=@interface VARIABLE PRE'
++++ bash_annotations_trap_controller
+++ var='@interface VARIABLE PRE'
++++ bash_annotations_trap_controller
+++ var='@interface VARIABLE PRE'
++++ bash_annotations_trap_controller
+++ echo '@interface VARIABLE PRE'
++ line='@interface VARIABLE PRE'
+++ bash_annotations_trap_controller
++ [[ 5 -eq 5 ]]
+++ bash_annotations_trap_controller
++ [[ @interface == \@\i\n\t\e\r\f\a\c\e ]]
+++ bash_annotations_trap_controller
++ start=true
+++ bash_annotations_trap_controller
++ continue
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '# Enforces strong typing at runtime for an annotated type.'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=# Enforces strong typing at runtime for an annotated type.'
++++ bash_annotations_trap_controller
+++ var='# Enforces strong typing at runtime for an annotated type.'
++++ bash_annotations_trap_controller
+++ var='# Enforces strong typing at runtime for an annotated type.'
++++ bash_annotations_trap_controller
+++ echo '# Enforces strong typing at runtime for an annotated type.'
++ line='# Enforces strong typing at runtime for an annotated type.'
+++ bash_annotations_trap_controller
++ [[ 6 -eq 5 ]]
+++ bash_annotations_trap_controller
++ [[ # Enforces strong typing at runtime for an annotated type. =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ # Enforces strong typing at runtime for an annotated type. =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ # Enforces strong typing at runtime for an annotated type. =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ continue
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '#'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local var=#
++++ bash_annotations_trap_controller
+++ var='#'
++++ bash_annotations_trap_controller
+++ var='#'
++++ bash_annotations_trap_controller
+++ echo '#'
++ line='#'
+++ bash_annotations_trap_controller
++ [[ 7 -eq 5 ]]
+++ bash_annotations_trap_controller
++ [[ # =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ # =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ # =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ continue
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '# Both variable and command types (e.g. "FUNCTION") can be enforced. '
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=# Both variable and command types (e.g. "FUNCTION") can be enforced. '
++++ bash_annotations_trap_controller
+++ var='# Both variable and command types (e.g. "FUNCTION") can be enforced. '
++++ bash_annotations_trap_controller
+++ var='# Both variable and command types (e.g. "FUNCTION") can be enforced.'
++++ bash_annotations_trap_controller
+++ echo '# Both variable and command types (e.g. "FUNCTION") can be enforced.'
++ line='# Both variable and command types (e.g. "FUNCTION") can be enforced.'
+++ bash_annotations_trap_controller
++ [[ 8 -eq 5 ]]
+++ bash_annotations_trap_controller
++ [[ # Both variable and command types (e.g. "FUNCTION") can be enforced. =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ # Both variable and command types (e.g. "FUNCTION") can be enforced. =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ # Both variable and command types (e.g. "FUNCTION") can be enforced. =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ continue
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '# Annotate variable declaration and/or initialisation. This annotation evaluates '
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=# Annotate variable declaration and/or initialisation. This annotation evaluates '
++++ bash_annotations_trap_controller
+++ var='# Annotate variable declaration and/or initialisation. This annotation evaluates '
++++ bash_annotations_trap_controller
+++ var='# Annotate variable declaration and/or initialisation. This annotation evaluates'
++++ bash_annotations_trap_controller
+++ echo '# Annotate variable declaration and/or initialisation. This annotation evaluates'
++ line='# Annotate variable declaration and/or initialisation. This annotation evaluates'
+++ bash_annotations_trap_controller
++ [[ 9 -eq 5 ]]
+++ bash_annotations_trap_controller
++ [[ # Annotate variable declaration and/or initialisation. This annotation evaluates =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ # Annotate variable declaration and/or initialisation. This annotation evaluates =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ # Annotate variable declaration and/or initialisation. This annotation evaluates =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ continue
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '# lazily, and will perform type checking when the annotated variable is called.'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=# lazily, and will perform type checking when the annotated variable is called.'
++++ bash_annotations_trap_controller
+++ var='# lazily, and will perform type checking when the annotated variable is called.'
++++ bash_annotations_trap_controller
+++ var='# lazily, and will perform type checking when the annotated variable is called.'
++++ bash_annotations_trap_controller
+++ echo '# lazily, and will perform type checking when the annotated variable is called.'
++ line='# lazily, and will perform type checking when the annotated variable is called.'
+++ bash_annotations_trap_controller
++ [[ 10 -eq 5 ]]
+++ bash_annotations_trap_controller
++ [[ # lazily, and will perform type checking when the annotated variable is called. =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ # lazily, and will perform type checking when the annotated variable is called. =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ # lazily, and will perform type checking when the annotated variable is called. =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ continue
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '#'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local var=#
++++ bash_annotations_trap_controller
+++ var='#'
++++ bash_annotations_trap_controller
+++ var='#'
++++ bash_annotations_trap_controller
+++ echo '#'
++ line='#'
+++ bash_annotations_trap_controller
++ [[ 11 -eq 5 ]]
+++ bash_annotations_trap_controller
++ [[ # =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ # =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ # =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ continue
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '# Parameter 1: Variable or command type'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=# Parameter 1: Variable or command type'
++++ bash_annotations_trap_controller
+++ var='# Parameter 1: Variable or command type'
++++ bash_annotations_trap_controller
+++ var='# Parameter 1: Variable or command type'
++++ bash_annotations_trap_controller
+++ echo '# Parameter 1: Variable or command type'
++ line='# Parameter 1: Variable or command type'
+++ bash_annotations_trap_controller
++ [[ 12 -eq 5 ]]
+++ bash_annotations_trap_controller
++ [[ # Parameter 1: Variable or command type =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ # Parameter 1: Variable or command type =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ # Parameter 1: Variable or command type =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ continue
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '#'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local var=#
++++ bash_annotations_trap_controller
+++ var='#'
++++ bash_annotations_trap_controller
+++ var='#'
++++ bash_annotations_trap_controller
+++ echo '#'
++ line='#'
+++ bash_annotations_trap_controller
++ [[ 13 -eq 5 ]]
+++ bash_annotations_trap_controller
++ [[ # =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ # =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ # =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ continue
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '# Valid values:'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=# Valid values:'
++++ bash_annotations_trap_controller
+++ var='# Valid values:'
++++ bash_annotations_trap_controller
+++ var='# Valid values:'
++++ bash_annotations_trap_controller
+++ echo '# Valid values:'
++ line='# Valid values:'
+++ bash_annotations_trap_controller
++ [[ 14 -eq 5 ]]
+++ bash_annotations_trap_controller
++ [[ # Valid values: =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ # Valid values: =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ # Valid values: =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ continue
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '# '
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=# '
++++ bash_annotations_trap_controller
+++ var='# '
++++ bash_annotations_trap_controller
+++ var='#'
++++ bash_annotations_trap_controller
+++ echo '#'
++ line='#'
+++ bash_annotations_trap_controller
++ [[ 15 -eq 5 ]]
+++ bash_annotations_trap_controller
++ [[ # =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ # =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ # =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ continue
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '# Variables: STRING, ARRAY, ASSOCIATIVE, INTEGER, NAMEREF'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=# Variables: STRING, ARRAY, ASSOCIATIVE, INTEGER, NAMEREF'
++++ bash_annotations_trap_controller
+++ var='# Variables: STRING, ARRAY, ASSOCIATIVE, INTEGER, NAMEREF'
++++ bash_annotations_trap_controller
+++ var='# Variables: STRING, ARRAY, ASSOCIATIVE, INTEGER, NAMEREF'
++++ bash_annotations_trap_controller
+++ echo '# Variables: STRING, ARRAY, ASSOCIATIVE, INTEGER, NAMEREF'
++ line='# Variables: STRING, ARRAY, ASSOCIATIVE, INTEGER, NAMEREF'
+++ bash_annotations_trap_controller
++ [[ 16 -eq 5 ]]
+++ bash_annotations_trap_controller
++ [[ # Variables: STRING, ARRAY, ASSOCIATIVE, INTEGER, NAMEREF =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ # Variables: STRING, ARRAY, ASSOCIATIVE, INTEGER, NAMEREF =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ # Variables: STRING, ARRAY, ASSOCIATIVE, INTEGER, NAMEREF =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ continue
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '#'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local var=#
++++ bash_annotations_trap_controller
+++ var='#'
++++ bash_annotations_trap_controller
+++ var='#'
++++ bash_annotations_trap_controller
+++ echo '#'
++ line='#'
+++ bash_annotations_trap_controller
++ [[ 17 -eq 5 ]]
+++ bash_annotations_trap_controller
++ [[ # =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ # =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ # =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ continue
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '# Commands: ALIAS, KEYWORD, FUNCTION, BUILTIN, FILE'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=# Commands: ALIAS, KEYWORD, FUNCTION, BUILTIN, FILE'
++++ bash_annotations_trap_controller
+++ var='# Commands: ALIAS, KEYWORD, FUNCTION, BUILTIN, FILE'
++++ bash_annotations_trap_controller
+++ var='# Commands: ALIAS, KEYWORD, FUNCTION, BUILTIN, FILE'
++++ bash_annotations_trap_controller
+++ echo '# Commands: ALIAS, KEYWORD, FUNCTION, BUILTIN, FILE'
++ line='# Commands: ALIAS, KEYWORD, FUNCTION, BUILTIN, FILE'
+++ bash_annotations_trap_controller
++ [[ 18 -eq 5 ]]
+++ bash_annotations_trap_controller
++ [[ # Commands: ALIAS, KEYWORD, FUNCTION, BUILTIN, FILE =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ # Commands: ALIAS, KEYWORD, FUNCTION, BUILTIN, FILE =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ # Commands: ALIAS, KEYWORD, FUNCTION, BUILTIN, FILE =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ continue
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '#'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local var=#
++++ bash_annotations_trap_controller
+++ var='#'
++++ bash_annotations_trap_controller
+++ var='#'
++++ bash_annotations_trap_controller
+++ echo '#'
++ line='#'
+++ bash_annotations_trap_controller
++ [[ 19 -eq 5 ]]
+++ bash_annotations_trap_controller
++ [[ # =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ # =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ # =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ continue
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '# Notes: '
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=# Notes: '
++++ bash_annotations_trap_controller
+++ var='# Notes: '
++++ bash_annotations_trap_controller
+++ var='# Notes:'
++++ bash_annotations_trap_controller
+++ echo '# Notes:'
++ line='# Notes:'
+++ bash_annotations_trap_controller
++ [[ 20 -eq 5 ]]
+++ bash_annotations_trap_controller
++ [[ # Notes: =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ # Notes: =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ # Notes: =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ continue
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '# '
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=# '
++++ bash_annotations_trap_controller
+++ var='# '
++++ bash_annotations_trap_controller
+++ var='#'
++++ bash_annotations_trap_controller
+++ echo '#'
++ line='#'
+++ bash_annotations_trap_controller
++ [[ 21 -eq 5 ]]
+++ bash_annotations_trap_controller
++ [[ # =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ # =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ # =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ continue
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '# ASSOCIATE=Associative array'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=# ASSOCIATE=Associative array'
++++ bash_annotations_trap_controller
+++ var='# ASSOCIATE=Associative array'
++++ bash_annotations_trap_controller
+++ var='# ASSOCIATE=Associative array'
++++ bash_annotations_trap_controller
+++ echo '# ASSOCIATE=Associative array'
++ line='# ASSOCIATE=Associative array'
+++ bash_annotations_trap_controller
++ [[ 22 -eq 5 ]]
+++ bash_annotations_trap_controller
++ [[ # ASSOCIATE=Associative array =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ # ASSOCIATE=Associative array =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ # ASSOCIATE=Associative array =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ continue
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '# '
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=# '
++++ bash_annotations_trap_controller
+++ var='# '
++++ bash_annotations_trap_controller
+++ var='#'
++++ bash_annotations_trap_controller
+++ echo '#'
++ line='#'
+++ bash_annotations_trap_controller
++ [[ 23 -eq 5 ]]
+++ bash_annotations_trap_controller
++ [[ # =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ # =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ # =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ continue
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '# If the type a name refereced (-n) variable is to be enforced, then annotate with'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=# If the type a name refereced (-n) variable is to be enforced, then annotate with'
++++ bash_annotations_trap_controller
+++ var='# If the type a name refereced (-n) variable is to be enforced, then annotate with'
++++ bash_annotations_trap_controller
+++ var='# If the type a name refereced (-n) variable is to be enforced, then annotate with'
++++ bash_annotations_trap_controller
+++ echo '# If the type a name refereced (-n) variable is to be enforced, then annotate with'
++ line='# If the type a name refereced (-n) variable is to be enforced, then annotate with'
+++ bash_annotations_trap_controller
++ [[ 24 -eq 5 ]]
+++ bash_annotations_trap_controller
++ [[ # If the type a name refereced (-n) variable is to be enforced, then annotate with =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ # If the type a name refereced (-n) variable is to be enforced, then annotate with =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ # If the type a name refereced (-n) variable is to be enforced, then annotate with =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ continue
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '# the actual variable type. '
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=# the actual variable type. '
++++ bash_annotations_trap_controller
+++ var='# the actual variable type. '
++++ bash_annotations_trap_controller
+++ var='# the actual variable type.'
++++ bash_annotations_trap_controller
+++ echo '# the actual variable type.'
++ line='# the actual variable type.'
+++ bash_annotations_trap_controller
++ [[ 25 -eq 5 ]]
+++ bash_annotations_trap_controller
++ [[ # the actual variable type. =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ # the actual variable type. =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ # the actual variable type. =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ continue
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '# '
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=# '
++++ bash_annotations_trap_controller
+++ var='# '
++++ bash_annotations_trap_controller
+++ var='#'
++++ bash_annotations_trap_controller
+++ echo '#'
++ line='#'
+++ bash_annotations_trap_controller
++ [[ 26 -eq 5 ]]
+++ bash_annotations_trap_controller
++ [[ # =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ # =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ # =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ continue
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '# If the intended type is indeed -n, specify NAMEREF. '
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=# If the intended type is indeed -n, specify NAMEREF. '
++++ bash_annotations_trap_controller
+++ var='# If the intended type is indeed -n, specify NAMEREF. '
++++ bash_annotations_trap_controller
+++ var='# If the intended type is indeed -n, specify NAMEREF.'
++++ bash_annotations_trap_controller
+++ echo '# If the intended type is indeed -n, specify NAMEREF.'
++ line='# If the intended type is indeed -n, specify NAMEREF.'
+++ bash_annotations_trap_controller
++ [[ 27 -eq 5 ]]
+++ bash_annotations_trap_controller
++ [[ # If the intended type is indeed -n, specify NAMEREF. =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ # If the intended type is indeed -n, specify NAMEREF. =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ # If the intended type is indeed -n, specify NAMEREF. =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ continue
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim 'element_type() {'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=element_type() {'
++++ bash_annotations_trap_controller
+++ var='element_type() {'
++++ bash_annotations_trap_controller
+++ var='element_type() {'
++++ bash_annotations_trap_controller
+++ echo 'element_type() {'
++ line='element_type() {'
+++ bash_annotations_trap_controller
++ [[ 28 -eq 5 ]]
+++ bash_annotations_trap_controller
++ [[ element_type() { =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ parse_body=true
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '    local type_assertion="${1}"'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=    local type_assertion="${1}"'
++++ bash_annotations_trap_controller
+++ var='local type_assertion="${1}"'
++++ bash_annotations_trap_controller
+++ var='local type_assertion="${1}"'
++++ bash_annotations_trap_controller
+++ echo 'local type_assertion="${1}"'
++ line='local type_assertion="${1}"'
+++ bash_annotations_trap_controller
++ [[ 29 -eq 5 ]]
+++ bash_annotations_trap_controller
++ [[ local type_assertion="${1}" =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ local type_assertion="${1}" =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ local type_assertion="${1}" =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ local type_assertion="${1}" =~ ^\s*\}\s*$ ]]
+++ bash_annotations_trap_controller
++ function_body_array+=("${line}")
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '    if ! check_type "${annotated_variable}" \'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=    if ! check_type "${annotated_variable}" \'
++++ bash_annotations_trap_controller
+++ var='if ! check_type "${annotated_variable}" \'
++++ bash_annotations_trap_controller
+++ var='if ! check_type "${annotated_variable}" \'
++++ bash_annotations_trap_controller
+++ echo 'if ! check_type "${annotated_variable}" \'
++ line='if ! check_type "${annotated_variable}" \'
+++ bash_annotations_trap_controller
++ [[ 30 -eq 5 ]]
+++ bash_annotations_trap_controller
++ [[ if ! check_type "${annotated_variable}" \ =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ if ! check_type "${annotated_variable}" \ =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ if ! check_type "${annotated_variable}" \ =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ if ! check_type "${annotated_variable}" \ =~ ^\s*\}\s*$ ]]
+++ bash_annotations_trap_controller
++ function_body_array+=("${line}")
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '    "${type_assertion}"; then'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=    "${type_assertion}"; then'
++++ bash_annotations_trap_controller
+++ var='"${type_assertion}"; then'
++++ bash_annotations_trap_controller
+++ var='"${type_assertion}"; then'
++++ bash_annotations_trap_controller
+++ echo '"${type_assertion}"; then'
++ line='"${type_assertion}"; then'
+++ bash_annotations_trap_controller
++ [[ 31 -eq 5 ]]
+++ bash_annotations_trap_controller
++ [[ "${type_assertion}"; then =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ "${type_assertion}"; then =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ "${type_assertion}"; then =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ "${type_assertion}"; then =~ ^\s*\}\s*$ ]]
+++ bash_annotations_trap_controller
++ function_body_array+=("${line}")
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '        exit 1'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=        exit 1'
++++ bash_annotations_trap_controller
+++ var='exit 1'
++++ bash_annotations_trap_controller
+++ var='exit 1'
++++ bash_annotations_trap_controller
+++ echo 'exit 1'
++ line='exit 1'
+++ bash_annotations_trap_controller
++ [[ 32 -eq 5 ]]
+++ bash_annotations_trap_controller
++ [[ exit 1 =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ exit 1 =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ exit 1 =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ exit 1 =~ ^\s*\}\s*$ ]]
+++ bash_annotations_trap_controller
++ function_body_array+=("${line}")
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '    fi'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=    fi'
++++ bash_annotations_trap_controller
+++ var=fi
++++ bash_annotations_trap_controller
+++ var=fi
++++ bash_annotations_trap_controller
+++ echo fi
++ line=fi
+++ bash_annotations_trap_controller
++ [[ 33 -eq 5 ]]
+++ bash_annotations_trap_controller
++ [[ fi =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ fi =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ fi =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ fi =~ ^\s*\}\s*$ ]]
+++ bash_annotations_trap_controller
++ function_body_array+=("${line}")
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '}'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=}'
++++ bash_annotations_trap_controller
+++ var='}'
++++ bash_annotations_trap_controller
+++ var='}'
++++ bash_annotations_trap_controller
+++ echo '}'
++ line='}'
+++ bash_annotations_trap_controller
++ [[ 34 -eq 5 ]]
+++ bash_annotations_trap_controller
++ [[ } =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ } =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ } =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ } =~ ^\s*\}\s*$ ]]
+++ bash_annotations_trap_controller
++ break
++ for line in "${function_body_array[@]}"
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ [[ @interface == \@\i\n\j\e\c\t ]]
+++ bash_annotations_trap_controller
++ [[ local type_assertion="${1}" == *\$\{\a\n\n\o\t\a\t\e\d\_\f\u\n\c\t\i\o\n\}* ]]
+++ bash_annotations_trap_controller
++ [[ local type_assertion="${1}" == *\$\{\a\n\n\o\t\a\t\e\d\_\v\a\r\i\a\b\l\e\}* ]]
+++ bash_annotations_trap_controller
++ [[ local type_assertion="${1}" == *$[1-9]* ]]
+++ bash_annotations_trap_controller
++ [[ local type_assertion="${1}" == *${[1-9]* ]]
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim 'local type_assertion="${1}"'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=local type_assertion="${1}"'
++++ bash_annotations_trap_controller
+++ var='local type_assertion="${1}"'
++++ bash_annotations_trap_controller
+++ var='local type_assertion="${1}"'
++++ bash_annotations_trap_controller
+++ echo 'local type_assertion="${1}"'
++ function_body_string+='local type_assertion="${1}"'
+++ bash_annotations_trap_controller
++ function_body_string+='
'
++ for line in "${function_body_array[@]}"
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ [[ @interface == \@\i\n\j\e\c\t ]]
+++ bash_annotations_trap_controller
++ [[ if ! check_type "${annotated_variable}" \ == *\$\{\a\n\n\o\t\a\t\e\d\_\f\u\n\c\t\i\o\n\}* ]]
+++ bash_annotations_trap_controller
++ [[ if ! check_type "${annotated_variable}" \ == *\$\{\a\n\n\o\t\a\t\e\d\_\v\a\r\i\a\b\l\e\}* ]]
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim 'if ! check_type "${annotated_variable}" \'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=if ! check_type "${annotated_variable}" \'
++++ bash_annotations_trap_controller
+++ var='if ! check_type "${annotated_variable}" \'
++++ bash_annotations_trap_controller
+++ var='if ! check_type "${annotated_variable}" \'
++++ bash_annotations_trap_controller
+++ echo 'if ! check_type "${annotated_variable}" \'
++ function_body_string+='if ! check_type "${annotated_variable}" \'
+++ bash_annotations_trap_controller
++ function_body_string+='
'
++ for line in "${function_body_array[@]}"
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ [[ @interface == \@\i\n\j\e\c\t ]]
+++ bash_annotations_trap_controller
++ [[ "${type_assertion}"; then == *\$\{\a\n\n\o\t\a\t\e\d\_\f\u\n\c\t\i\o\n\}* ]]
+++ bash_annotations_trap_controller
++ [[ "${type_assertion}"; then == *\$\{\a\n\n\o\t\a\t\e\d\_\v\a\r\i\a\b\l\e\}* ]]
+++ bash_annotations_trap_controller
++ [[ "${type_assertion}"; then == *$[1-9]* ]]
+++ bash_annotations_trap_controller
++ [[ "${type_assertion}"; then == *${[1-9]* ]]
+++ bash_annotations_trap_controller
++ [[ "${type_assertion}"; then == *\$\@* ]]
+++ bash_annotations_trap_controller
++ [[ "${type_assertion}"; then == *\$\{\@* ]]
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '"\${type_assertion}"; then'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var="\${type_assertion}"; then'
++++ bash_annotations_trap_controller
+++ var='"\${type_assertion}"; then'
++++ bash_annotations_trap_controller
+++ var='"\${type_assertion}"; then'
++++ bash_annotations_trap_controller
+++ echo '"\${type_assertion}"; then'
++ function_body_string+='"\${type_assertion}"; then'
+++ bash_annotations_trap_controller
++ function_body_string+='
'
++ for line in "${function_body_array[@]}"
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ [[ @interface == \@\i\n\j\e\c\t ]]
+++ bash_annotations_trap_controller
++ [[ exit 1 == *\$\{\a\n\n\o\t\a\t\e\d\_\f\u\n\c\t\i\o\n\}* ]]
+++ bash_annotations_trap_controller
++ [[ exit 1 == *\$\{\a\n\n\o\t\a\t\e\d\_\v\a\r\i\a\b\l\e\}* ]]
+++ bash_annotations_trap_controller
++ [[ exit 1 == *$[1-9]* ]]
+++ bash_annotations_trap_controller
++ [[ exit 1 == *${[1-9]* ]]
+++ bash_annotations_trap_controller
++ [[ exit 1 == *\$\@* ]]
+++ bash_annotations_trap_controller
++ [[ exit 1 == *\$\{\@* ]]
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim 'exit 1'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=exit 1'
++++ bash_annotations_trap_controller
+++ var='exit 1'
++++ bash_annotations_trap_controller
+++ var='exit 1'
++++ bash_annotations_trap_controller
+++ echo 'exit 1'
++ function_body_string+='exit 1'
+++ bash_annotations_trap_controller
++ function_body_string+='
'
++ for line in "${function_body_array[@]}"
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ [[ @interface == \@\i\n\j\e\c\t ]]
+++ bash_annotations_trap_controller
++ [[ fi == *\$\{\a\n\n\o\t\a\t\e\d\_\f\u\n\c\t\i\o\n\}* ]]
+++ bash_annotations_trap_controller
++ [[ fi == *\$\{\a\n\n\o\t\a\t\e\d\_\v\a\r\i\a\b\l\e\}* ]]
+++ bash_annotations_trap_controller
++ [[ fi == *$[1-9]* ]]
+++ bash_annotations_trap_controller
++ [[ fi == *${[1-9]* ]]
+++ bash_annotations_trap_controller
++ [[ fi == *\$\@* ]]
+++ bash_annotations_trap_controller
++ [[ fi == *\$\{\@* ]]
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim fi
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local var=fi
++++ bash_annotations_trap_controller
+++ var=fi
++++ bash_annotations_trap_controller
+++ var=fi
++++ bash_annotations_trap_controller
+++ echo fi
++ function_body_string+=fi
+++ bash_annotations_trap_controller
++ function_body_string+='
'
+++ bash_annotations_trap_controller
++ [[ -n local type_assertion="${1}"
if ! check_type "${annotated_variable}" \
"\${type_assertion}"; then
exit 1
fi
 ]]
+++ bash_annotations_trap_controller
++ [[ VARIABLE == \F\U\N\C\T\I\O\N ]]
+++ bash_annotations_trap_controller
++ [[ VARIABLE == \V\A\R\I\A\B\L\E ]]
+++ bash_annotations_trap_controller
++ [[ PRE == \P\R\E ]]
+++ bash_annotations_trap_controller
++ _build_variable_annotation_pre element_type 'local type_assertion="${1}"
if ! check_type "${annotated_variable}" \
"\${type_assertion}"; then
exit 1
fi
'
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ local annotation_target=element_type
+++ bash_annotations_trap_controller
++ local 'function_body=local type_assertion="${1}"
if ! check_type "${annotated_variable}" \
"\${type_assertion}"; then
exit 1
fi
'
++++ bash_annotations_trap_controller
+++ realpath '${BASH_SOURCE[1]}'
+++ bash_annotations_trap_controller
++ builtin source /dev/fd/999
++ bash_annotations_trap_controller
+ import annotations/functions/timer.sh
++ bash_annotations_trap_controller
++ bash_annotations_trap_controller
+ to_source=("${@}")
+ local to_source
+ for script in "${to_source[@]}"
++ bash_annotations_trap_controller
++ bash_annotations_trap_controller
+ _is_imported annotations/functions/timer.sh
++ bash_annotations_trap_controller
++ bash_annotations_trap_controller
+ local import_requested=annotations/functions/timer.sh
+ for imported in "${BASH_ANNOTATIONS_IMPORT_ARRAY[@]}"
++ bash_annotations_trap_controller
++ bash_annotations_trap_controller
+ [[ annotations/functions/timer.sh == \i\n\t\e\r\f\a\c\e\s\/\i\n\t\e\r\f\a\c\e\.\s\h ]]
+ for imported in "${BASH_ANNOTATIONS_IMPORT_ARRAY[@]}"
++ bash_annotations_trap_controller
++ bash_annotations_trap_controller
+ [[ annotations/functions/timer.sh == \r\e\f\l\e\c\t\i\o\n\.\s\h ]]
+ for imported in "${BASH_ANNOTATIONS_IMPORT_ARRAY[@]}"
++ bash_annotations_trap_controller
++ bash_annotations_trap_controller
+ [[ annotations/functions/timer.sh == \u\t\i\l\/\u\t\i\l\i\t\y\.\s\h ]]
+ for imported in "${BASH_ANNOTATIONS_IMPORT_ARRAY[@]}"
++ bash_annotations_trap_controller
++ bash_annotations_trap_controller
+ [[ annotations/functions/timer.sh == \a\n\n\o\t\a\t\i\o\n\s\/\v\a\r\i\a\b\l\e\s\/\e\l\e\m\e\n\t\_\t\y\p\e\.\s\h ]]
+ for imported in "${BASH_ANNOTATIONS_IMPORT_ARRAY[@]}"
++ bash_annotations_trap_controller
++ bash_annotations_trap_controller
+ [[ annotations/functions/timer.sh == \u\t\i\l\/\t\y\p\e\s\.\s\h ]]
++ bash_annotations_trap_controller
+ return 1
++ bash_annotations_trap_controller
+ [[ -f /mnt/c/GitHub/bash-annotations/src/annotations/functions/timer.sh ]]
++ bash_annotations_trap_controller
+ BASH_ANNOTATIONS_IMPORT_ARRAY+=("${script}")
++ bash_annotations_trap_controller
+ builtin source /mnt/c/GitHub/bash-annotations/src/annotations/functions/timer.sh
+++ bash_annotations_trap_controller
++ import interfaces/interface.sh
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ to_source=("${@}")
++ local to_source
++ for script in "${to_source[@]}"
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ _is_imported interfaces/interface.sh
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ local import_requested=interfaces/interface.sh
++ for imported in "${BASH_ANNOTATIONS_IMPORT_ARRAY[@]}"
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ [[ interfaces/interface.sh == \i\n\t\e\r\f\a\c\e\s\/\i\n\t\e\r\f\a\c\e\.\s\h ]]
+++ bash_annotations_trap_controller
++ return 0
+++ bash_annotations_trap_controller
++ continue
+++ bash_annotations_trap_controller
++ @interface FUNCTION PREPOST
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ annotated_type FUNCTION
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ local type=FUNCTION
++ case "${type}" in
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ return 0
+++ bash_annotations_trap_controller
++ local type=FUNCTION
+++ bash_annotations_trap_controller
++ trigger PREPOST
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ local trigger=PREPOST
++ case "${trigger}" in
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ return 0
+++ bash_annotations_trap_controller
++ local trigger=PREPOST
+++ bash_annotations_trap_controller
++ local get_annotated_target
+++ bash_annotations_trap_controller
++ local annotation_target
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ realpath /mnt/c/GitHub/bash-annotations/src/annotations/functions/timer.sh
++ local source_file=/mnt/c/GitHub/bash-annotations/src/annotations/functions/timer.sh
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ get_annotated_function /mnt/c/GitHub/bash-annotations/src/annotations/functions/timer.sh
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local source_file=/mnt/c/GitHub/bash-annotations/src/annotations/functions/timer.sh
++++ bash_annotations_trap_controller
+++ local annotation=@interface
++++ bash_annotations_trap_controller
+++ local annotation_length=10
++++ bash_annotations_trap_controller
+++ local line_start=4
++++ bash_annotations_trap_controller
+++ local counter=0
++++ bash_annotations_trap_controller
+++ local start=false
++++ bash_annotations_trap_controller
+++ local 'function_pattern=^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$'
++++ bash_annotations_trap_controller
+++ local 'annotations_pattern=^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$'
++++ bash_annotations_trap_controller
+++ local 'comment_pattern=^\s*#.*$'
++++ bash_annotations_trap_controller
+++ IFS=
+++ read -r line
++++ bash_annotations_trap_controller
+++ (( counter++ ))
++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ trim 'import interfaces/interface.sh'
+++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ local 'var=import interfaces/interface.sh'
+++++ bash_annotations_trap_controller
++++ var='import interfaces/interface.sh'
+++++ bash_annotations_trap_controller
++++ var='import interfaces/interface.sh'
+++++ bash_annotations_trap_controller
++++ echo 'import interfaces/interface.sh'
+++ line='import interfaces/interface.sh'
++++ bash_annotations_trap_controller
+++ [[ 1 -eq 4 ]]
++++ bash_annotations_trap_controller
+++ [[ import interfaces/interface.sh =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
++++ bash_annotations_trap_controller
+++ [[ import interfaces/interface.sh =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
++++ bash_annotations_trap_controller
+++ [[ import interfaces/interface.sh =~ ^\s*#.*$ ]]
++++ bash_annotations_trap_controller
+++ [[ ! import interfaces/interface.sh =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
++++ bash_annotations_trap_controller
+++ [[ false == \t\r\u\e ]]
++++ bash_annotations_trap_controller
+++ continue
++++ bash_annotations_trap_controller
+++ IFS=
+++ read -r line
++++ bash_annotations_trap_controller
+++ (( counter++ ))
++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ trim ''
+++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ local var=
+++++ bash_annotations_trap_controller
++++ var=
+++++ bash_annotations_trap_controller
++++ var=
+++++ bash_annotations_trap_controller
++++ echo ''
+++ line=
++++ bash_annotations_trap_controller
+++ [[ 2 -eq 4 ]]
++++ bash_annotations_trap_controller
+++ [[ '' =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
++++ bash_annotations_trap_controller
+++ [[ '' =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
++++ bash_annotations_trap_controller
+++ [[ '' =~ ^\s*#.*$ ]]
++++ bash_annotations_trap_controller
+++ [[ ! '' =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
++++ bash_annotations_trap_controller
+++ [[ false == \t\r\u\e ]]
++++ bash_annotations_trap_controller
+++ continue
++++ bash_annotations_trap_controller
+++ IFS=
+++ read -r line
++++ bash_annotations_trap_controller
+++ (( counter++ ))
++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ trim ''
+++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ local var=
+++++ bash_annotations_trap_controller
++++ var=
+++++ bash_annotations_trap_controller
++++ var=
+++++ bash_annotations_trap_controller
++++ echo ''
+++ line=
++++ bash_annotations_trap_controller
+++ [[ 3 -eq 4 ]]
++++ bash_annotations_trap_controller
+++ [[ '' =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
++++ bash_annotations_trap_controller
+++ [[ '' =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
++++ bash_annotations_trap_controller
+++ [[ '' =~ ^\s*#.*$ ]]
++++ bash_annotations_trap_controller
+++ [[ ! '' =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
++++ bash_annotations_trap_controller
+++ [[ false == \t\r\u\e ]]
++++ bash_annotations_trap_controller
+++ continue
++++ bash_annotations_trap_controller
+++ IFS=
+++ read -r line
++++ bash_annotations_trap_controller
+++ (( counter++ ))
++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ trim '@interface FUNCTION PREPOST'
+++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ local 'var=@interface FUNCTION PREPOST'
+++++ bash_annotations_trap_controller
++++ var='@interface FUNCTION PREPOST'
+++++ bash_annotations_trap_controller
++++ var='@interface FUNCTION PREPOST'
+++++ bash_annotations_trap_controller
++++ echo '@interface FUNCTION PREPOST'
+++ line='@interface FUNCTION PREPOST'
++++ bash_annotations_trap_controller
+++ [[ 4 -eq 4 ]]
++++ bash_annotations_trap_controller
+++ [[ @interface == \@\i\n\t\e\r\f\a\c\e ]]
++++ bash_annotations_trap_controller
+++ start=true
++++ bash_annotations_trap_controller
+++ continue
++++ bash_annotations_trap_controller
+++ IFS=
+++ read -r line
++++ bash_annotations_trap_controller
+++ (( counter++ ))
++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ trim '# Return seconds as float: https://unix.stackexchange.com/questions/314365/get-elapsed-time-in-bash '
+++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ local 'var=# Return seconds as float: https://unix.stackexchange.com/questions/314365/get-elapsed-time-in-bash '
+++++ bash_annotations_trap_controller
++++ var='# Return seconds as float: https://unix.stackexchange.com/questions/314365/get-elapsed-time-in-bash '
+++++ bash_annotations_trap_controller
++++ var='# Return seconds as float: https://unix.stackexchange.com/questions/314365/get-elapsed-time-in-bash'
+++++ bash_annotations_trap_controller
++++ echo '# Return seconds as float: https://unix.stackexchange.com/questions/314365/get-elapsed-time-in-bash'
+++ line='# Return seconds as float: https://unix.stackexchange.com/questions/314365/get-elapsed-time-in-bash'
++++ bash_annotations_trap_controller
+++ [[ 5 -eq 4 ]]
++++ bash_annotations_trap_controller
+++ [[ # Return seconds as float: https://unix.stackexchange.com/questions/314365/get-elapsed-time-in-bash =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
++++ bash_annotations_trap_controller
+++ [[ # Return seconds as float: https://unix.stackexchange.com/questions/314365/get-elapsed-time-in-bash =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
++++ bash_annotations_trap_controller
+++ [[ # Return seconds as float: https://unix.stackexchange.com/questions/314365/get-elapsed-time-in-bash =~ ^\s*#.*$ ]]
++++ bash_annotations_trap_controller
+++ [[ true == \t\r\u\e ]]
++++ bash_annotations_trap_controller
+++ continue
++++ bash_annotations_trap_controller
+++ IFS=
+++ read -r line
++++ bash_annotations_trap_controller
+++ (( counter++ ))
++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ trim 'timer() {'
+++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ local 'var=timer() {'
+++++ bash_annotations_trap_controller
++++ var='timer() {'
+++++ bash_annotations_trap_controller
++++ var='timer() {'
+++++ bash_annotations_trap_controller
++++ echo 'timer() {'
+++ line='timer() {'
++++ bash_annotations_trap_controller
+++ [[ 6 -eq 4 ]]
++++ bash_annotations_trap_controller
+++ [[ timer() { =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
++++ bash_annotations_trap_controller
+++ [[ true == \t\r\u\e ]]
++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ trim 'timer() {'
+++++ bash_annotations_trap_controller
+++++ bash_annotations_trap_controller
++++ local 'var=timer() {'
+++++ bash_annotations_trap_controller
++++ var='timer() {'
+++++ bash_annotations_trap_controller
++++ var='timer() {'
+++++ bash_annotations_trap_controller
++++ echo 'timer() {'
+++ match='timer() {'
++++ bash_annotations_trap_controller
+++ echo timer
++++ bash_annotations_trap_controller
+++ return 0
++ annotation_target=timer
+++ bash_annotations_trap_controller
++ [[ -n timer ]]
+++ bash_annotations_trap_controller
++ local function_body
+++ bash_annotations_trap_controller
++ get_annotated_function_body function_body /mnt/c/GitHub/bash-annotations/src/annotations/functions/timer.sh
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ local -n function_body_string=function_body
+++ bash_annotations_trap_controller
++ local -a function_body_array
+++ bash_annotations_trap_controller
++ local source_file=/mnt/c/GitHub/bash-annotations/src/annotations/functions/timer.sh
+++ bash_annotations_trap_controller
++ local annotation=@interface
+++ bash_annotations_trap_controller
++ local annotation_length=10
+++ bash_annotations_trap_controller
++ local line_start=4
+++ bash_annotations_trap_controller
++ local counter=0
+++ bash_annotations_trap_controller
++ local start=false
+++ bash_annotations_trap_controller
++ local parse_body=false
+++ bash_annotations_trap_controller
++ local 'function_pattern=^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$'
+++ bash_annotations_trap_controller
++ local 'end_of_function_pattern=^\s*\}\s*$'
+++ bash_annotations_trap_controller
++ local 'annotations_pattern=^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$'
+++ bash_annotations_trap_controller
++ local 'comment_pattern=^\s*#.*$'
+++ bash_annotations_trap_controller
++ local 'reserved_namespace_annotated_function=${annotated_function}'
+++ bash_annotations_trap_controller
++ local 'reserved_namespace_annotated_variable=${annotated_variable}'
+++ bash_annotations_trap_controller
++ local 'positional_parameters_pattern=$[1-9]'
+++ bash_annotations_trap_controller
++ local 'positional_parameters_pattern_braces=${[1-9]'
+++ bash_annotations_trap_controller
++ local 'array_parameter_pattern=$@'
+++ bash_annotations_trap_controller
++ local 'array_parameter_pattern_braces=${@'
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim 'import interfaces/interface.sh'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=import interfaces/interface.sh'
++++ bash_annotations_trap_controller
+++ var='import interfaces/interface.sh'
++++ bash_annotations_trap_controller
+++ var='import interfaces/interface.sh'
++++ bash_annotations_trap_controller
+++ echo 'import interfaces/interface.sh'
++ line='import interfaces/interface.sh'
+++ bash_annotations_trap_controller
++ [[ 1 -eq 4 ]]
+++ bash_annotations_trap_controller
++ [[ import interfaces/interface.sh =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ import interfaces/interface.sh =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ import interfaces/interface.sh =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ false == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ ! import interfaces/interface.sh =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ false == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ continue
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim ''
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local var=
++++ bash_annotations_trap_controller
+++ var=
++++ bash_annotations_trap_controller
+++ var=
++++ bash_annotations_trap_controller
+++ echo ''
++ line=
+++ bash_annotations_trap_controller
++ [[ 2 -eq 4 ]]
+++ bash_annotations_trap_controller
++ [[ '' =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ '' =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ '' =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ false == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ ! '' =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ false == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ continue
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim ''
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local var=
++++ bash_annotations_trap_controller
+++ var=
++++ bash_annotations_trap_controller
+++ var=
++++ bash_annotations_trap_controller
+++ echo ''
++ line=
+++ bash_annotations_trap_controller
++ [[ 3 -eq 4 ]]
+++ bash_annotations_trap_controller
++ [[ '' =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ '' =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ '' =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ false == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ ! '' =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ false == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ continue
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '@interface FUNCTION PREPOST'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=@interface FUNCTION PREPOST'
++++ bash_annotations_trap_controller
+++ var='@interface FUNCTION PREPOST'
++++ bash_annotations_trap_controller
+++ var='@interface FUNCTION PREPOST'
++++ bash_annotations_trap_controller
+++ echo '@interface FUNCTION PREPOST'
++ line='@interface FUNCTION PREPOST'
+++ bash_annotations_trap_controller
++ [[ 4 -eq 4 ]]
+++ bash_annotations_trap_controller
++ [[ @interface == \@\i\n\t\e\r\f\a\c\e ]]
+++ bash_annotations_trap_controller
++ start=true
+++ bash_annotations_trap_controller
++ continue
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '# Return seconds as float: https://unix.stackexchange.com/questions/314365/get-elapsed-time-in-bash '
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=# Return seconds as float: https://unix.stackexchange.com/questions/314365/get-elapsed-time-in-bash '
++++ bash_annotations_trap_controller
+++ var='# Return seconds as float: https://unix.stackexchange.com/questions/314365/get-elapsed-time-in-bash '
++++ bash_annotations_trap_controller
+++ var='# Return seconds as float: https://unix.stackexchange.com/questions/314365/get-elapsed-time-in-bash'
++++ bash_annotations_trap_controller
+++ echo '# Return seconds as float: https://unix.stackexchange.com/questions/314365/get-elapsed-time-in-bash'
++ line='# Return seconds as float: https://unix.stackexchange.com/questions/314365/get-elapsed-time-in-bash'
+++ bash_annotations_trap_controller
++ [[ 5 -eq 4 ]]
+++ bash_annotations_trap_controller
++ [[ # Return seconds as float: https://unix.stackexchange.com/questions/314365/get-elapsed-time-in-bash =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ # Return seconds as float: https://unix.stackexchange.com/questions/314365/get-elapsed-time-in-bash =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ # Return seconds as float: https://unix.stackexchange.com/questions/314365/get-elapsed-time-in-bash =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ continue
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim 'timer() {'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=timer() {'
++++ bash_annotations_trap_controller
+++ var='timer() {'
++++ bash_annotations_trap_controller
+++ var='timer() {'
++++ bash_annotations_trap_controller
+++ echo 'timer() {'
++ line='timer() {'
+++ bash_annotations_trap_controller
++ [[ 6 -eq 4 ]]
+++ bash_annotations_trap_controller
++ [[ timer() { =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ parse_body=true
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '    declare -gx bash_annotations_timer_start'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=    declare -gx bash_annotations_timer_start'
++++ bash_annotations_trap_controller
+++ var='declare -gx bash_annotations_timer_start'
++++ bash_annotations_trap_controller
+++ var='declare -gx bash_annotations_timer_start'
++++ bash_annotations_trap_controller
+++ echo 'declare -gx bash_annotations_timer_start'
++ line='declare -gx bash_annotations_timer_start'
+++ bash_annotations_trap_controller
++ [[ 7 -eq 4 ]]
+++ bash_annotations_trap_controller
++ [[ declare -gx bash_annotations_timer_start =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ declare -gx bash_annotations_timer_start =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ declare -gx bash_annotations_timer_start =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ declare -gx bash_annotations_timer_start =~ ^\s*\}\s*$ ]]
+++ bash_annotations_trap_controller
++ function_body_array+=("${line}")
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '    declare -gx bash_annotations_timer_end'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=    declare -gx bash_annotations_timer_end'
++++ bash_annotations_trap_controller
+++ var='declare -gx bash_annotations_timer_end'
++++ bash_annotations_trap_controller
+++ var='declare -gx bash_annotations_timer_end'
++++ bash_annotations_trap_controller
+++ echo 'declare -gx bash_annotations_timer_end'
++ line='declare -gx bash_annotations_timer_end'
+++ bash_annotations_trap_controller
++ [[ 8 -eq 4 ]]
+++ bash_annotations_trap_controller
++ [[ declare -gx bash_annotations_timer_end =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ declare -gx bash_annotations_timer_end =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ declare -gx bash_annotations_timer_end =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ declare -gx bash_annotations_timer_end =~ ^\s*\}\s*$ ]]
+++ bash_annotations_trap_controller
++ function_body_array+=("${line}")
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim ''
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local var=
++++ bash_annotations_trap_controller
+++ var=
++++ bash_annotations_trap_controller
+++ var=
++++ bash_annotations_trap_controller
+++ echo ''
++ line=
+++ bash_annotations_trap_controller
++ [[ 9 -eq 4 ]]
+++ bash_annotations_trap_controller
++ [[ '' =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ '' =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ '' =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ '' =~ ^\s*\}\s*$ ]]
+++ bash_annotations_trap_controller
++ function_body_array+=("${line}")
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '    if invoke_function_annotation_pre "${annotated_function}" && \'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=    if invoke_function_annotation_pre "${annotated_function}" && \'
++++ bash_annotations_trap_controller
+++ var='if invoke_function_annotation_pre "${annotated_function}" && \'
++++ bash_annotations_trap_controller
+++ var='if invoke_function_annotation_pre "${annotated_function}" && \'
++++ bash_annotations_trap_controller
+++ echo 'if invoke_function_annotation_pre "${annotated_function}" && \'
++ line='if invoke_function_annotation_pre "${annotated_function}" && \'
+++ bash_annotations_trap_controller
++ [[ 10 -eq 4 ]]
+++ bash_annotations_trap_controller
++ [[ if invoke_function_annotation_pre "${annotated_function}" && \ =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ if invoke_function_annotation_pre "${annotated_function}" && \ =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ if invoke_function_annotation_pre "${annotated_function}" && \ =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ if invoke_function_annotation_pre "${annotated_function}" && \ =~ ^\s*\}\s*$ ]]
+++ bash_annotations_trap_controller
++ function_body_array+=("${line}")
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '    [[ -z "${bash_annotations_timer_start}" ]]; then'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=    [[ -z "${bash_annotations_timer_start}" ]]; then'
++++ bash_annotations_trap_controller
+++ var='[[ -z "${bash_annotations_timer_start}" ]]; then'
++++ bash_annotations_trap_controller
+++ var='[[ -z "${bash_annotations_timer_start}" ]]; then'
++++ bash_annotations_trap_controller
+++ echo '[[ -z "${bash_annotations_timer_start}" ]]; then'
++ line='[[ -z "${bash_annotations_timer_start}" ]]; then'
+++ bash_annotations_trap_controller
++ [[ 11 -eq 4 ]]
+++ bash_annotations_trap_controller
++ [[ [[ -z "${bash_annotations_timer_start}" ]]; then =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ [[ -z "${bash_annotations_timer_start}" ]]; then =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ [[ -z "${bash_annotations_timer_start}" ]]; then =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ [[ -z "${bash_annotations_timer_start}" ]]; then =~ ^\s*\}\s*$ ]]
+++ bash_annotations_trap_controller
++ function_body_array+=("${line}")
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '        bash_annotations_timer_start=$(date -u +%s.%N)'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=        bash_annotations_timer_start=$(date -u +%s.%N)'
++++ bash_annotations_trap_controller
+++ var='bash_annotations_timer_start=$(date -u +%s.%N)'
++++ bash_annotations_trap_controller
+++ var='bash_annotations_timer_start=$(date -u +%s.%N)'
++++ bash_annotations_trap_controller
+++ echo 'bash_annotations_timer_start=$(date -u +%s.%N)'
++ line='bash_annotations_timer_start=$(date -u +%s.%N)'
+++ bash_annotations_trap_controller
++ [[ 12 -eq 4 ]]
+++ bash_annotations_trap_controller
++ [[ bash_annotations_timer_start=$(date -u +%s.%N) =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ bash_annotations_timer_start=$(date -u +%s.%N) =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ bash_annotations_timer_start=$(date -u +%s.%N) =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ bash_annotations_timer_start=$(date -u +%s.%N) =~ ^\s*\}\s*$ ]]
+++ bash_annotations_trap_controller
++ function_body_array+=("${line}")
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '    elif invoke_function_annotation_post "${annotated_function}" && \'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=    elif invoke_function_annotation_post "${annotated_function}" && \'
++++ bash_annotations_trap_controller
+++ var='elif invoke_function_annotation_post "${annotated_function}" && \'
++++ bash_annotations_trap_controller
+++ var='elif invoke_function_annotation_post "${annotated_function}" && \'
++++ bash_annotations_trap_controller
+++ echo 'elif invoke_function_annotation_post "${annotated_function}" && \'
++ line='elif invoke_function_annotation_post "${annotated_function}" && \'
+++ bash_annotations_trap_controller
++ [[ 13 -eq 4 ]]
+++ bash_annotations_trap_controller
++ [[ elif invoke_function_annotation_post "${annotated_function}" && \ =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ elif invoke_function_annotation_post "${annotated_function}" && \ =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ elif invoke_function_annotation_post "${annotated_function}" && \ =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ elif invoke_function_annotation_post "${annotated_function}" && \ =~ ^\s*\}\s*$ ]]
+++ bash_annotations_trap_controller
++ function_body_array+=("${line}")
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '    [[ -n "${bash_annotations_timer_start}" ]]; then'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=    [[ -n "${bash_annotations_timer_start}" ]]; then'
++++ bash_annotations_trap_controller
+++ var='[[ -n "${bash_annotations_timer_start}" ]]; then'
++++ bash_annotations_trap_controller
+++ var='[[ -n "${bash_annotations_timer_start}" ]]; then'
++++ bash_annotations_trap_controller
+++ echo '[[ -n "${bash_annotations_timer_start}" ]]; then'
++ line='[[ -n "${bash_annotations_timer_start}" ]]; then'
+++ bash_annotations_trap_controller
++ [[ 14 -eq 4 ]]
+++ bash_annotations_trap_controller
++ [[ [[ -n "${bash_annotations_timer_start}" ]]; then =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ [[ -n "${bash_annotations_timer_start}" ]]; then =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ [[ -n "${bash_annotations_timer_start}" ]]; then =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ [[ -n "${bash_annotations_timer_start}" ]]; then =~ ^\s*\}\s*$ ]]
+++ bash_annotations_trap_controller
++ function_body_array+=("${line}")
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '        bash_annotations_timer_end=$(date -u +%s.%N)'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=        bash_annotations_timer_end=$(date -u +%s.%N)'
++++ bash_annotations_trap_controller
+++ var='bash_annotations_timer_end=$(date -u +%s.%N)'
++++ bash_annotations_trap_controller
+++ var='bash_annotations_timer_end=$(date -u +%s.%N)'
++++ bash_annotations_trap_controller
+++ echo 'bash_annotations_timer_end=$(date -u +%s.%N)'
++ line='bash_annotations_timer_end=$(date -u +%s.%N)'
+++ bash_annotations_trap_controller
++ [[ 15 -eq 4 ]]
+++ bash_annotations_trap_controller
++ [[ bash_annotations_timer_end=$(date -u +%s.%N) =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ bash_annotations_timer_end=$(date -u +%s.%N) =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ bash_annotations_timer_end=$(date -u +%s.%N) =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ bash_annotations_timer_end=$(date -u +%s.%N) =~ ^\s*\}\s*$ ]]
+++ bash_annotations_trap_controller
++ function_body_array+=("${line}")
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '        printf "%s() runtime: " "${annotated_function}"'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=        printf "%s() runtime: " "${annotated_function}"'
++++ bash_annotations_trap_controller
+++ var='printf "%s() runtime: " "${annotated_function}"'
++++ bash_annotations_trap_controller
+++ var='printf "%s() runtime: " "${annotated_function}"'
++++ bash_annotations_trap_controller
+++ echo 'printf "%s() runtime: " "${annotated_function}"'
++ line='printf "%s() runtime: " "${annotated_function}"'
+++ bash_annotations_trap_controller
++ [[ 16 -eq 4 ]]
+++ bash_annotations_trap_controller
++ [[ printf "%s() runtime: " "${annotated_function}" =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ printf "%s() runtime: " "${annotated_function}" =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ printf "%s() runtime: " "${annotated_function}" =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ printf "%s() runtime: " "${annotated_function}" =~ ^\s*\}\s*$ ]]
+++ bash_annotations_trap_controller
++ function_body_array+=("${line}")
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '        printf "%0.3f seconds\n" "$(bc -q <<< "scale=3; $bash_annotations_timer_end - $bash_annotations_timer_start")"'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=        printf "%0.3f seconds\n" "$(bc -q <<< "scale=3; $bash_annotations_timer_end - $bash_annotations_timer_start")"'
++++ bash_annotations_trap_controller
+++ var='printf "%0.3f seconds\n" "$(bc -q <<< "scale=3; $bash_annotations_timer_end - $bash_annotations_timer_start")"'
++++ bash_annotations_trap_controller
+++ var='printf "%0.3f seconds\n" "$(bc -q <<< "scale=3; $bash_annotations_timer_end - $bash_annotations_timer_start")"'
++++ bash_annotations_trap_controller
+++ echo 'printf "%0.3f seconds\n" "$(bc -q <<< "scale=3; $bash_annotations_timer_end - $bash_annotations_timer_start")"'
++ line='printf "%0.3f seconds\n" "$(bc -q <<< "scale=3; $bash_annotations_timer_end - $bash_annotations_timer_start")"'
+++ bash_annotations_trap_controller
++ [[ 17 -eq 4 ]]
+++ bash_annotations_trap_controller
++ [[ printf "%0.3f seconds\n" "$(bc -q <<< "scale=3; $bash_annotations_timer_end - $bash_annotations_timer_start")" =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ printf "%0.3f seconds\n" "$(bc -q <<< "scale=3; $bash_annotations_timer_end - $bash_annotations_timer_start")" =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ printf "%0.3f seconds\n" "$(bc -q <<< "scale=3; $bash_annotations_timer_end - $bash_annotations_timer_start")" =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ printf "%0.3f seconds\n" "$(bc -q <<< "scale=3; $bash_annotations_timer_end - $bash_annotations_timer_start")" =~ ^\s*\}\s*$ ]]
+++ bash_annotations_trap_controller
++ function_body_array+=("${line}")
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '        # Unset global variables for use by other annotated functions'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=        # Unset global variables for use by other annotated functions'
++++ bash_annotations_trap_controller
+++ var='# Unset global variables for use by other annotated functions'
++++ bash_annotations_trap_controller
+++ var='# Unset global variables for use by other annotated functions'
++++ bash_annotations_trap_controller
+++ echo '# Unset global variables for use by other annotated functions'
++ line='# Unset global variables for use by other annotated functions'
+++ bash_annotations_trap_controller
++ [[ 18 -eq 4 ]]
+++ bash_annotations_trap_controller
++ [[ # Unset global variables for use by other annotated functions =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ # Unset global variables for use by other annotated functions =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ # Unset global variables for use by other annotated functions =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ continue
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '        unset -v bash_annotations_timer_start'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=        unset -v bash_annotations_timer_start'
++++ bash_annotations_trap_controller
+++ var='unset -v bash_annotations_timer_start'
++++ bash_annotations_trap_controller
+++ var='unset -v bash_annotations_timer_start'
++++ bash_annotations_trap_controller
+++ echo 'unset -v bash_annotations_timer_start'
++ line='unset -v bash_annotations_timer_start'
+++ bash_annotations_trap_controller
++ [[ 19 -eq 4 ]]
+++ bash_annotations_trap_controller
++ [[ unset -v bash_annotations_timer_start =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ unset -v bash_annotations_timer_start =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ unset -v bash_annotations_timer_start =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ unset -v bash_annotations_timer_start =~ ^\s*\}\s*$ ]]
+++ bash_annotations_trap_controller
++ function_body_array+=("${line}")
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '        unset -v bash_annotations_timer_end'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=        unset -v bash_annotations_timer_end'
++++ bash_annotations_trap_controller
+++ var='unset -v bash_annotations_timer_end'
++++ bash_annotations_trap_controller
+++ var='unset -v bash_annotations_timer_end'
++++ bash_annotations_trap_controller
+++ echo 'unset -v bash_annotations_timer_end'
++ line='unset -v bash_annotations_timer_end'
+++ bash_annotations_trap_controller
++ [[ 20 -eq 4 ]]
+++ bash_annotations_trap_controller
++ [[ unset -v bash_annotations_timer_end =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ unset -v bash_annotations_timer_end =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ unset -v bash_annotations_timer_end =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ unset -v bash_annotations_timer_end =~ ^\s*\}\s*$ ]]
+++ bash_annotations_trap_controller
++ function_body_array+=("${line}")
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '    fi'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=    fi'
++++ bash_annotations_trap_controller
+++ var=fi
++++ bash_annotations_trap_controller
+++ var=fi
++++ bash_annotations_trap_controller
+++ echo fi
++ line=fi
+++ bash_annotations_trap_controller
++ [[ 21 -eq 4 ]]
+++ bash_annotations_trap_controller
++ [[ fi =~ ^\s*[a-zA-Z:./_-]+\s*\(\)\s*\{$ ]]
+++ bash_annotations_trap_controller
++ [[ fi =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ fi =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ [[ fi =~ ^\s*\}\s*$ ]]
+++ bash_annotations_trap_controller
++ function_body_array+=("${line}")
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
++ for line in "${function_body_array[@]}"
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ [[ @interface == \@\i\n\j\e\c\t ]]
+++ bash_annotations_trap_controller
++ [[ declare -gx bash_annotations_timer_start == *\$\{\a\n\n\o\t\a\t\e\d\_\f\u\n\c\t\i\o\n\}* ]]
+++ bash_annotations_trap_controller
++ [[ declare -gx bash_annotations_timer_start == *\$\{\a\n\n\o\t\a\t\e\d\_\v\a\r\i\a\b\l\e\}* ]]
+++ bash_annotations_trap_controller
++ [[ declare -gx bash_annotations_timer_start == *$[1-9]* ]]
+++ bash_annotations_trap_controller
++ [[ declare -gx bash_annotations_timer_start == *${[1-9]* ]]
+++ bash_annotations_trap_controller
++ [[ declare -gx bash_annotations_timer_start == *\$\@* ]]
+++ bash_annotations_trap_controller
++ [[ declare -gx bash_annotations_timer_start == *\$\{\@* ]]
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim 'declare -gx bash_annotations_timer_start'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=declare -gx bash_annotations_timer_start'
++++ bash_annotations_trap_controller
+++ var='declare -gx bash_annotations_timer_start'
++++ bash_annotations_trap_controller
+++ var='declare -gx bash_annotations_timer_start'
++++ bash_annotations_trap_controller
+++ echo 'declare -gx bash_annotations_timer_start'
++ function_body_string+='declare -gx bash_annotations_timer_start'
+++ bash_annotations_trap_controller
++ function_body_string+='
'
++ for line in "${function_body_array[@]}"
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ [[ @interface == \@\i\n\j\e\c\t ]]
+++ bash_annotations_trap_controller
++ [[ declare -gx bash_annotations_timer_end == *\$\{\a\n\n\o\t\a\t\e\d\_\f\u\n\c\t\i\o\n\}* ]]
+++ bash_annotations_trap_controller
++ [[ declare -gx bash_annotations_timer_end == *\$\{\a\n\n\o\t\a\t\e\d\_\v\a\r\i\a\b\l\e\}* ]]
+++ bash_annotations_trap_controller
++ [[ declare -gx bash_annotations_timer_end == *$[1-9]* ]]
+++ bash_annotations_trap_controller
++ [[ declare -gx bash_annotations_timer_end == *${[1-9]* ]]
+++ bash_annotations_trap_controller
++ [[ declare -gx bash_annotations_timer_end == *\$\@* ]]
+++ bash_annotations_trap_controller
++ [[ declare -gx bash_annotations_timer_end == *\$\{\@* ]]
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim 'declare -gx bash_annotations_timer_end'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=declare -gx bash_annotations_timer_end'
++++ bash_annotations_trap_controller
+++ var='declare -gx bash_annotations_timer_end'
++++ bash_annotations_trap_controller
+++ var='declare -gx bash_annotations_timer_end'
++++ bash_annotations_trap_controller
+++ echo 'declare -gx bash_annotations_timer_end'
++ function_body_string+='declare -gx bash_annotations_timer_end'
+++ bash_annotations_trap_controller
++ function_body_string+='
'
++ for line in "${function_body_array[@]}"
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ [[ @interface == \@\i\n\j\e\c\t ]]
+++ bash_annotations_trap_controller
++ [[ '' == *\$\{\a\n\n\o\t\a\t\e\d\_\f\u\n\c\t\i\o\n\}* ]]
+++ bash_annotations_trap_controller
++ [[ '' == *\$\{\a\n\n\o\t\a\t\e\d\_\v\a\r\i\a\b\l\e\}* ]]
+++ bash_annotations_trap_controller
++ [[ '' == *$[1-9]* ]]
+++ bash_annotations_trap_controller
++ [[ '' == *${[1-9]* ]]
+++ bash_annotations_trap_controller
++ [[ '' == *\$\@* ]]
+++ bash_annotations_trap_controller
++ [[ '' == *\$\{\@* ]]
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim ''
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local var=
++++ bash_annotations_trap_controller
+++ var=
++++ bash_annotations_trap_controller
+++ var=
++++ bash_annotations_trap_controller
+++ echo ''
++ function_body_string+=
+++ bash_annotations_trap_controller
++ function_body_string+='
'
++ for line in "${function_body_array[@]}"
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ [[ @interface == \@\i\n\j\e\c\t ]]
+++ bash_annotations_trap_controller
++ [[ if invoke_function_annotation_pre "${annotated_function}" && \ == *\$\{\a\n\n\o\t\a\t\e\d\_\f\u\n\c\t\i\o\n\}* ]]
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim 'if invoke_function_annotation_pre "${annotated_function}" && \'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=if invoke_function_annotation_pre "${annotated_function}" && \'
++++ bash_annotations_trap_controller
+++ var='if invoke_function_annotation_pre "${annotated_function}" && \'
++++ bash_annotations_trap_controller
+++ var='if invoke_function_annotation_pre "${annotated_function}" && \'
++++ bash_annotations_trap_controller
+++ echo 'if invoke_function_annotation_pre "${annotated_function}" && \'
++ function_body_string+='if invoke_function_annotation_pre "${annotated_function}" && \'
+++ bash_annotations_trap_controller
++ function_body_string+='
'
++ for line in "${function_body_array[@]}"
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ [[ @interface == \@\i\n\j\e\c\t ]]
+++ bash_annotations_trap_controller
++ [[ [[ -z "${bash_annotations_timer_start}" ]]; then == *\$\{\a\n\n\o\t\a\t\e\d\_\f\u\n\c\t\i\o\n\}* ]]
+++ bash_annotations_trap_controller
++ [[ [[ -z "${bash_annotations_timer_start}" ]]; then == *\$\{\a\n\n\o\t\a\t\e\d\_\v\a\r\i\a\b\l\e\}* ]]
+++ bash_annotations_trap_controller
++ [[ [[ -z "${bash_annotations_timer_start}" ]]; then == *$[1-9]* ]]
+++ bash_annotations_trap_controller
++ [[ [[ -z "${bash_annotations_timer_start}" ]]; then == *${[1-9]* ]]
+++ bash_annotations_trap_controller
++ [[ [[ -z "${bash_annotations_timer_start}" ]]; then == *\$\@* ]]
+++ bash_annotations_trap_controller
++ [[ [[ -z "${bash_annotations_timer_start}" ]]; then == *\$\{\@* ]]
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '[[ -z "\${bash_annotations_timer_start}" ]]; then'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=[[ -z "\${bash_annotations_timer_start}" ]]; then'
++++ bash_annotations_trap_controller
+++ var='[[ -z "\${bash_annotations_timer_start}" ]]; then'
++++ bash_annotations_trap_controller
+++ var='[[ -z "\${bash_annotations_timer_start}" ]]; then'
++++ bash_annotations_trap_controller
+++ echo '[[ -z "\${bash_annotations_timer_start}" ]]; then'
++ function_body_string+='[[ -z "\${bash_annotations_timer_start}" ]]; then'
+++ bash_annotations_trap_controller
++ function_body_string+='
'
++ for line in "${function_body_array[@]}"
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ [[ @interface == \@\i\n\j\e\c\t ]]
+++ bash_annotations_trap_controller
++ [[ bash_annotations_timer_start=$(date -u +%s.%N) == *\$\{\a\n\n\o\t\a\t\e\d\_\f\u\n\c\t\i\o\n\}* ]]
+++ bash_annotations_trap_controller
++ [[ bash_annotations_timer_start=$(date -u +%s.%N) == *\$\{\a\n\n\o\t\a\t\e\d\_\v\a\r\i\a\b\l\e\}* ]]
+++ bash_annotations_trap_controller
++ [[ bash_annotations_timer_start=$(date -u +%s.%N) == *$[1-9]* ]]
+++ bash_annotations_trap_controller
++ [[ bash_annotations_timer_start=$(date -u +%s.%N) == *${[1-9]* ]]
+++ bash_annotations_trap_controller
++ [[ bash_annotations_timer_start=$(date -u +%s.%N) == *\$\@* ]]
+++ bash_annotations_trap_controller
++ [[ bash_annotations_timer_start=$(date -u +%s.%N) == *\$\{\@* ]]
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim 'bash_annotations_timer_start=\$(date -u +%s.%N)'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=bash_annotations_timer_start=\$(date -u +%s.%N)'
++++ bash_annotations_trap_controller
+++ var='bash_annotations_timer_start=\$(date -u +%s.%N)'
++++ bash_annotations_trap_controller
+++ var='bash_annotations_timer_start=\$(date -u +%s.%N)'
++++ bash_annotations_trap_controller
+++ echo 'bash_annotations_timer_start=\$(date -u +%s.%N)'
++ function_body_string+='bash_annotations_timer_start=\$(date -u +%s.%N)'
+++ bash_annotations_trap_controller
++ function_body_string+='
'
++ for line in "${function_body_array[@]}"
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ [[ @interface == \@\i\n\j\e\c\t ]]
+++ bash_annotations_trap_controller
++ [[ elif invoke_function_annotation_post "${annotated_function}" && \ == *\$\{\a\n\n\o\t\a\t\e\d\_\f\u\n\c\t\i\o\n\}* ]]
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim 'elif invoke_function_annotation_post "${annotated_function}" && \'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=elif invoke_function_annotation_post "${annotated_function}" && \'
++++ bash_annotations_trap_controller
+++ var='elif invoke_function_annotation_post "${annotated_function}" && \'
++++ bash_annotations_trap_controller
+++ var='elif invoke_function_annotation_post "${annotated_function}" && \'
++++ bash_annotations_trap_controller
+++ echo 'elif invoke_function_annotation_post "${annotated_function}" && \'
++ function_body_string+='elif invoke_function_annotation_post "${annotated_function}" && \'
+++ bash_annotations_trap_controller
++ function_body_string+='
'
++ for line in "${function_body_array[@]}"
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ [[ @interface == \@\i\n\j\e\c\t ]]
+++ bash_annotations_trap_controller
++ [[ [[ -n "${bash_annotations_timer_start}" ]]; then == *\$\{\a\n\n\o\t\a\t\e\d\_\f\u\n\c\t\i\o\n\}* ]]
+++ bash_annotations_trap_controller
++ [[ [[ -n "${bash_annotations_timer_start}" ]]; then == *\$\{\a\n\n\o\t\a\t\e\d\_\v\a\r\i\a\b\l\e\}* ]]
+++ bash_annotations_trap_controller
++ [[ [[ -n "${bash_annotations_timer_start}" ]]; then == *$[1-9]* ]]
+++ bash_annotations_trap_controller
++ [[ [[ -n "${bash_annotations_timer_start}" ]]; then == *${[1-9]* ]]
+++ bash_annotations_trap_controller
++ [[ [[ -n "${bash_annotations_timer_start}" ]]; then == *\$\@* ]]
+++ bash_annotations_trap_controller
++ [[ [[ -n "${bash_annotations_timer_start}" ]]; then == *\$\{\@* ]]
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '[[ -n "\${bash_annotations_timer_start}" ]]; then'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=[[ -n "\${bash_annotations_timer_start}" ]]; then'
++++ bash_annotations_trap_controller
+++ var='[[ -n "\${bash_annotations_timer_start}" ]]; then'
++++ bash_annotations_trap_controller
+++ var='[[ -n "\${bash_annotations_timer_start}" ]]; then'
++++ bash_annotations_trap_controller
+++ echo '[[ -n "\${bash_annotations_timer_start}" ]]; then'
++ function_body_string+='[[ -n "\${bash_annotations_timer_start}" ]]; then'
+++ bash_annotations_trap_controller
++ function_body_string+='
'
++ for line in "${function_body_array[@]}"
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ [[ @interface == \@\i\n\j\e\c\t ]]
+++ bash_annotations_trap_controller
++ [[ bash_annotations_timer_end=$(date -u +%s.%N) == *\$\{\a\n\n\o\t\a\t\e\d\_\f\u\n\c\t\i\o\n\}* ]]
+++ bash_annotations_trap_controller
++ [[ bash_annotations_timer_end=$(date -u +%s.%N) == *\$\{\a\n\n\o\t\a\t\e\d\_\v\a\r\i\a\b\l\e\}* ]]
+++ bash_annotations_trap_controller
++ [[ bash_annotations_timer_end=$(date -u +%s.%N) == *$[1-9]* ]]
+++ bash_annotations_trap_controller
++ [[ bash_annotations_timer_end=$(date -u +%s.%N) == *${[1-9]* ]]
+++ bash_annotations_trap_controller
++ [[ bash_annotations_timer_end=$(date -u +%s.%N) == *\$\@* ]]
+++ bash_annotations_trap_controller
++ [[ bash_annotations_timer_end=$(date -u +%s.%N) == *\$\{\@* ]]
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim 'bash_annotations_timer_end=\$(date -u +%s.%N)'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=bash_annotations_timer_end=\$(date -u +%s.%N)'
++++ bash_annotations_trap_controller
+++ var='bash_annotations_timer_end=\$(date -u +%s.%N)'
++++ bash_annotations_trap_controller
+++ var='bash_annotations_timer_end=\$(date -u +%s.%N)'
++++ bash_annotations_trap_controller
+++ echo 'bash_annotations_timer_end=\$(date -u +%s.%N)'
++ function_body_string+='bash_annotations_timer_end=\$(date -u +%s.%N)'
+++ bash_annotations_trap_controller
++ function_body_string+='
'
++ for line in "${function_body_array[@]}"
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ [[ @interface == \@\i\n\j\e\c\t ]]
+++ bash_annotations_trap_controller
++ [[ printf "%s() runtime: " "${annotated_function}" == *\$\{\a\n\n\o\t\a\t\e\d\_\f\u\n\c\t\i\o\n\}* ]]
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim 'printf "%s() runtime: " "${annotated_function}"'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=printf "%s() runtime: " "${annotated_function}"'
++++ bash_annotations_trap_controller
+++ var='printf "%s() runtime: " "${annotated_function}"'
++++ bash_annotations_trap_controller
+++ var='printf "%s() runtime: " "${annotated_function}"'
++++ bash_annotations_trap_controller
+++ echo 'printf "%s() runtime: " "${annotated_function}"'
++ function_body_string+='printf "%s() runtime: " "${annotated_function}"'
+++ bash_annotations_trap_controller
++ function_body_string+='
'
++ for line in "${function_body_array[@]}"
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ [[ @interface == \@\i\n\j\e\c\t ]]
+++ bash_annotations_trap_controller
++ [[ printf "%0.3f seconds\n" "$(bc -q <<< "scale=3; $bash_annotations_timer_end - $bash_annotations_timer_start")" == *\$\{\a\n\n\o\t\a\t\e\d\_\f\u\n\c\t\i\o\n\}* ]]
+++ bash_annotations_trap_controller
++ [[ printf "%0.3f seconds\n" "$(bc -q <<< "scale=3; $bash_annotations_timer_end - $bash_annotations_timer_start")" == *\$\{\a\n\n\o\t\a\t\e\d\_\v\a\r\i\a\b\l\e\}* ]]
+++ bash_annotations_trap_controller
++ [[ printf "%0.3f seconds\n" "$(bc -q <<< "scale=3; $bash_annotations_timer_end - $bash_annotations_timer_start")" == *$[1-9]* ]]
+++ bash_annotations_trap_controller
++ [[ printf "%0.3f seconds\n" "$(bc -q <<< "scale=3; $bash_annotations_timer_end - $bash_annotations_timer_start")" == *${[1-9]* ]]
+++ bash_annotations_trap_controller
++ [[ printf "%0.3f seconds\n" "$(bc -q <<< "scale=3; $bash_annotations_timer_end - $bash_annotations_timer_start")" == *\$\@* ]]
+++ bash_annotations_trap_controller
++ [[ printf "%0.3f seconds\n" "$(bc -q <<< "scale=3; $bash_annotations_timer_end - $bash_annotations_timer_start")" == *\$\{\@* ]]
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim 'printf "%0.3f seconds\n" "\$(bc -q <<< "scale=3; \$bash_annotations_timer_end - \$bash_annotations_timer_start")"'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=printf "%0.3f seconds\n" "\$(bc -q <<< "scale=3; \$bash_annotations_timer_end - \$bash_annotations_timer_start")"'
++++ bash_annotations_trap_controller
+++ var='printf "%0.3f seconds\n" "\$(bc -q <<< "scale=3; \$bash_annotations_timer_end - \$bash_annotations_timer_start")"'
++++ bash_annotations_trap_controller
+++ var='printf "%0.3f seconds\n" "\$(bc -q <<< "scale=3; \$bash_annotations_timer_end - \$bash_annotations_timer_start")"'
++++ bash_annotations_trap_controller
+++ echo 'printf "%0.3f seconds\n" "\$(bc -q <<< "scale=3; \$bash_annotations_timer_end - \$bash_annotations_timer_start")"'
++ function_body_string+='printf "%0.3f seconds\n" "\$(bc -q <<< "scale=3; \$bash_annotations_timer_end - \$bash_annotations_timer_start")"'
+++ bash_annotations_trap_controller
++ function_body_string+='
'
++ for line in "${function_body_array[@]}"
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ [[ @interface == \@\i\n\j\e\c\t ]]
+++ bash_annotations_trap_controller
++ [[ unset -v bash_annotations_timer_start == *\$\{\a\n\n\o\t\a\t\e\d\_\f\u\n\c\t\i\o\n\}* ]]
+++ bash_annotations_trap_controller
++ [[ unset -v bash_annotations_timer_start == *\$\{\a\n\n\o\t\a\t\e\d\_\v\a\r\i\a\b\l\e\}* ]]
+++ bash_annotations_trap_controller
++ [[ unset -v bash_annotations_timer_start == *$[1-9]* ]]
+++ bash_annotations_trap_controller
++ [[ unset -v bash_annotations_timer_start == *${[1-9]* ]]
+++ bash_annotations_trap_controller
++ [[ unset -v bash_annotations_timer_start == *\$\@* ]]
+++ bash_annotations_trap_controller
++ [[ unset -v bash_annotations_timer_start == *\$\{\@* ]]
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim 'unset -v bash_annotations_timer_start'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=unset -v bash_annotations_timer_start'
++++ bash_annotations_trap_controller
+++ var='unset -v bash_annotations_timer_start'
++++ bash_annotations_trap_controller
+++ var='unset -v bash_annotations_timer_start'
++++ bash_annotations_trap_controller
+++ echo 'unset -v bash_annotations_timer_start'
++ function_body_string+='unset -v bash_annotations_timer_start'
+++ bash_annotations_trap_controller
++ function_body_string+='
'
++ for line in "${function_body_array[@]}"
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ [[ @interface == \@\i\n\j\e\c\t ]]
+++ bash_annotations_trap_controller
++ [[ unset -v bash_annotations_timer_end == *\$\{\a\n\n\o\t\a\t\e\d\_\f\u\n\c\t\i\o\n\}* ]]
+++ bash_annotations_trap_controller
++ [[ unset -v bash_annotations_timer_end == *\$\{\a\n\n\o\t\a\t\e\d\_\v\a\r\i\a\b\l\e\}* ]]
+++ bash_annotations_trap_controller
++ [[ unset -v bash_annotations_timer_end == *$[1-9]* ]]
+++ bash_annotations_trap_controller
++ [[ unset -v bash_annotations_timer_end == *${[1-9]* ]]
+++ bash_annotations_trap_controller
++ [[ unset -v bash_annotations_timer_end == *\$\@* ]]
+++ bash_annotations_trap_controller
++ [[ unset -v bash_annotations_timer_end == *\$\{\@* ]]
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim 'unset -v bash_annotations_timer_end'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=unset -v bash_annotations_timer_end'
++++ bash_annotations_trap_controller
+++ var='unset -v bash_annotations_timer_end'
++++ bash_annotations_trap_controller
+++ var='unset -v bash_annotations_timer_end'
++++ bash_annotations_trap_controller
+++ echo 'unset -v bash_annotations_timer_end'
++ function_body_string+='unset -v bash_annotations_timer_end'
+++ bash_annotations_trap_controller
++ function_body_string+='
'
++ for line in "${function_body_array[@]}"
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ [[ @interface == \@\i\n\j\e\c\t ]]
+++ bash_annotations_trap_controller
++ [[ fi == *\$\{\a\n\n\o\t\a\t\e\d\_\f\u\n\c\t\i\o\n\}* ]]
+++ bash_annotations_trap_controller
++ [[ fi == *\$\{\a\n\n\o\t\a\t\e\d\_\v\a\r\i\a\b\l\e\}* ]]
+++ bash_annotations_trap_controller
++ [[ fi == *$[1-9]* ]]
+++ bash_annotations_trap_controller
++ [[ fi == *${[1-9]* ]]
+++ bash_annotations_trap_controller
++ [[ fi == *\$\@* ]]
+++ bash_annotations_trap_controller
++ [[ fi == *\$\{\@* ]]
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim fi
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local var=fi
++++ bash_annotations_trap_controller
+++ var=fi
++++ bash_annotations_trap_controller
+++ var=fi
++++ bash_annotations_trap_controller
+++ echo fi
++ function_body_string+=fi
+++ bash_annotations_trap_controller
++ function_body_string+='
'
+++ bash_annotations_trap_controller
++ [[ -n declare -gx bash_annotations_timer_start
declare -gx bash_annotations_timer_end

if invoke_function_annotation_pre "${annotated_function}" && \
[[ -z "\${bash_annotations_timer_start}" ]]; then
bash_annotations_timer_start=\$(date -u +%s.%N)
elif invoke_function_annotation_post "${annotated_function}" && \
[[ -n "\${bash_annotations_timer_start}" ]]; then
bash_annotations_timer_end=\$(date -u +%s.%N)
printf "%s() runtime: " "${annotated_function}"
printf "%0.3f seconds\n" "\$(bc -q <<< "scale=3; \$bash_annotations_timer_end - \$bash_annotations_timer_start")"
unset -v bash_annotations_timer_start
unset -v bash_annotations_timer_end
fi
 ]]
+++ bash_annotations_trap_controller
++ [[ FUNCTION == \F\U\N\C\T\I\O\N ]]
+++ bash_annotations_trap_controller
++ [[ PREPOST == \P\R\E ]]
+++ bash_annotations_trap_controller
++ [[ PREPOST == \P\O\S\T ]]
+++ bash_annotations_trap_controller
++ [[ PREPOST == \P\R\E\P\O\S\T ]]
+++ bash_annotations_trap_controller
++ _build_function_annotation_prepost timer 'declare -gx bash_annotations_timer_start
declare -gx bash_annotations_timer_end

if invoke_function_annotation_pre "${annotated_function}" && \
[[ -z "\${bash_annotations_timer_start}" ]]; then
bash_annotations_timer_start=\$(date -u +%s.%N)
elif invoke_function_annotation_post "${annotated_function}" && \
[[ -n "\${bash_annotations_timer_start}" ]]; then
bash_annotations_timer_end=\$(date -u +%s.%N)
printf "%s() runtime: " "${annotated_function}"
printf "%0.3f seconds\n" "\$(bc -q <<< "scale=3; \$bash_annotations_timer_end - \$bash_annotations_timer_start")"
unset -v bash_annotations_timer_start
unset -v bash_annotations_timer_end
fi
'
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ local annotation_target=timer
+++ bash_annotations_trap_controller
++ local 'function_body=declare -gx bash_annotations_timer_start
declare -gx bash_annotations_timer_end

if invoke_function_annotation_pre "${annotated_function}" && \
[[ -z "\${bash_annotations_timer_start}" ]]; then
bash_annotations_timer_start=\$(date -u +%s.%N)
elif invoke_function_annotation_post "${annotated_function}" && \
[[ -n "\${bash_annotations_timer_start}" ]]; then
bash_annotations_timer_end=\$(date -u +%s.%N)
printf "%s() runtime: " "${annotated_function}"
printf "%0.3f seconds\n" "\$(bc -q <<< "scale=3; \$bash_annotations_timer_end - \$bash_annotations_timer_start")"
unset -v bash_annotations_timer_start
unset -v bash_annotations_timer_end
fi
'
++++ bash_annotations_trap_controller
+++ realpath '${BASH_SOURCE[1]}'
+++ bash_annotations_trap_controller
++ builtin source /dev/fd/999
++ bash_annotations_trap_controller
+ declare hello=HELLO
++ bash_annotations_trap_controller
+ parameters HELLO 222
++ bash_annotations_trap_controller
++ bash_annotations_trap_controller
+ @element_type STRING
++ bash_annotations_trap_controller
++ bash_annotations_trap_controller
+ local function_namespace=@element_type_14
++ bash_annotations_trap_controller
+ local source_file=/mnt/c/GitHub/bash-annotations/src/playground.sh
++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ get_annotated_variable /mnt/c/GitHub/bash-annotations/src/playground.sh
+++ bash_annotations_trap_controller
+++ bash_annotations_trap_controller
++ local source_file=/mnt/c/GitHub/bash-annotations/src/playground.sh
+++ bash_annotations_trap_controller
++ local annotation=@element_type
+++ bash_annotations_trap_controller
++ local annotation_length=13
+++ bash_annotations_trap_controller
++ local line_start=14
+++ bash_annotations_trap_controller
++ local counter=0
+++ bash_annotations_trap_controller
++ local start=false
+++ bash_annotations_trap_controller
++ local 'initialisation_pattern=^\s*[a-zA-Z0-9_-]+='
+++ bash_annotations_trap_controller
++ local 'declaration_pattern=^(declare|local)\s*(-[gaAilnrtux]+)?\s*[a-zA-Z0-9_-]+\s*$'
+++ bash_annotations_trap_controller
++ local 'declaration_initialisation_pattern=^(declare|local)\s*(-[gaAilnrtux]+)?\s*[a-zA-Z0-9_-]+='
+++ bash_annotations_trap_controller
++ local 'annotations_pattern=^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$'
+++ bash_annotations_trap_controller
++ local 'comment_pattern=^\s*#.*$'
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '#!/bin/bash'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=#!/bin/bash'
++++ bash_annotations_trap_controller
+++ var='#!/bin/bash'
++++ bash_annotations_trap_controller
+++ var='#!/bin/bash'
++++ bash_annotations_trap_controller
+++ echo '#!/bin/bash'
++ line='#!/bin/bash'
+++ bash_annotations_trap_controller
++ [[ 1 -eq 14 ]]
+++ bash_annotations_trap_controller
++ [[ #!/bin/bash =~ ^\s*[a-zA-Z0-9_-]+= ]]
+++ bash_annotations_trap_controller
++ [[ #!/bin/bash =~ ^(declare|local)\s*(-[gaAilnrtux]+)?\s*[a-zA-Z0-9_-]+\s*$ ]]
+++ bash_annotations_trap_controller
++ [[ #!/bin/bash =~ ^(declare|local)\s*(-[gaAilnrtux]+)?\s*[a-zA-Z0-9_-]+= ]]
+++ bash_annotations_trap_controller
++ [[ #!/bin/bash =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ #!/bin/bash =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ false == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ ((  counter >= (line_start + 1)  ))
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim ''
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local var=
++++ bash_annotations_trap_controller
+++ var=
++++ bash_annotations_trap_controller
+++ var=
++++ bash_annotations_trap_controller
+++ echo ''
++ line=
+++ bash_annotations_trap_controller
++ [[ 2 -eq 14 ]]
+++ bash_annotations_trap_controller
++ [[ '' =~ ^\s*[a-zA-Z0-9_-]+= ]]
+++ bash_annotations_trap_controller
++ [[ '' =~ ^(declare|local)\s*(-[gaAilnrtux]+)?\s*[a-zA-Z0-9_-]+\s*$ ]]
+++ bash_annotations_trap_controller
++ [[ '' =~ ^(declare|local)\s*(-[gaAilnrtux]+)?\s*[a-zA-Z0-9_-]+= ]]
+++ bash_annotations_trap_controller
++ [[ '' =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ '' =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ ((  counter >= (line_start + 1)  ))
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim 'source $(dirname "${BASH_SOURCE[0]}")/bash-annotations.sh'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=source $(dirname "${BASH_SOURCE[0]}")/bash-annotations.sh'
++++ bash_annotations_trap_controller
+++ var='source $(dirname "${BASH_SOURCE[0]}")/bash-annotations.sh'
++++ bash_annotations_trap_controller
+++ var='source $(dirname "${BASH_SOURCE[0]}")/bash-annotations.sh'
++++ bash_annotations_trap_controller
+++ echo 'source $(dirname "${BASH_SOURCE[0]}")/bash-annotations.sh'
++ line='source $(dirname "${BASH_SOURCE[0]}")/bash-annotations.sh'
+++ bash_annotations_trap_controller
++ [[ 3 -eq 14 ]]
+++ bash_annotations_trap_controller
++ [[ source $(dirname "${BASH_SOURCE[0]}")/bash-annotations.sh =~ ^\s*[a-zA-Z0-9_-]+= ]]
+++ bash_annotations_trap_controller
++ [[ source $(dirname "${BASH_SOURCE[0]}")/bash-annotations.sh =~ ^(declare|local)\s*(-[gaAilnrtux]+)?\s*[a-zA-Z0-9_-]+\s*$ ]]
+++ bash_annotations_trap_controller
++ [[ source $(dirname "${BASH_SOURCE[0]}")/bash-annotations.sh =~ ^(declare|local)\s*(-[gaAilnrtux]+)?\s*[a-zA-Z0-9_-]+= ]]
+++ bash_annotations_trap_controller
++ [[ source $(dirname "${BASH_SOURCE[0]}")/bash-annotations.sh =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ source $(dirname "${BASH_SOURCE[0]}")/bash-annotations.sh =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ ((  counter >= (line_start + 1)  ))
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim 'import interfaces/interface.sh '
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=import interfaces/interface.sh '
++++ bash_annotations_trap_controller
+++ var='import interfaces/interface.sh '
++++ bash_annotations_trap_controller
+++ var='import interfaces/interface.sh'
++++ bash_annotations_trap_controller
+++ echo 'import interfaces/interface.sh'
++ line='import interfaces/interface.sh'
+++ bash_annotations_trap_controller
++ [[ 4 -eq 14 ]]
+++ bash_annotations_trap_controller
++ [[ import interfaces/interface.sh =~ ^\s*[a-zA-Z0-9_-]+= ]]
+++ bash_annotations_trap_controller
++ [[ import interfaces/interface.sh =~ ^(declare|local)\s*(-[gaAilnrtux]+)?\s*[a-zA-Z0-9_-]+\s*$ ]]
+++ bash_annotations_trap_controller
++ [[ import interfaces/interface.sh =~ ^(declare|local)\s*(-[gaAilnrtux]+)?\s*[a-zA-Z0-9_-]+= ]]
+++ bash_annotations_trap_controller
++ [[ import interfaces/interface.sh =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ import interfaces/interface.sh =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ ((  counter >= (line_start + 1)  ))
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '#import interfaces/inject.sh '
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=#import interfaces/inject.sh '
++++ bash_annotations_trap_controller
+++ var='#import interfaces/inject.sh '
++++ bash_annotations_trap_controller
+++ var='#import interfaces/inject.sh'
++++ bash_annotations_trap_controller
+++ echo '#import interfaces/inject.sh'
++ line='#import interfaces/inject.sh'
+++ bash_annotations_trap_controller
++ [[ 5 -eq 14 ]]
+++ bash_annotations_trap_controller
++ [[ #import interfaces/inject.sh =~ ^\s*[a-zA-Z0-9_-]+= ]]
+++ bash_annotations_trap_controller
++ [[ #import interfaces/inject.sh =~ ^(declare|local)\s*(-[gaAilnrtux]+)?\s*[a-zA-Z0-9_-]+\s*$ ]]
+++ bash_annotations_trap_controller
++ [[ #import interfaces/inject.sh =~ ^(declare|local)\s*(-[gaAilnrtux]+)?\s*[a-zA-Z0-9_-]+= ]]
+++ bash_annotations_trap_controller
++ [[ #import interfaces/inject.sh =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ #import interfaces/inject.sh =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ false == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ ((  counter >= (line_start + 1)  ))
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '# import util/utility.sh interfaces/inject.sh annotations/functions/ignore.sh annotations/functions/debug.sh'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=# import util/utility.sh interfaces/inject.sh annotations/functions/ignore.sh annotations/functions/debug.sh'
++++ bash_annotations_trap_controller
+++ var='# import util/utility.sh interfaces/inject.sh annotations/functions/ignore.sh annotations/functions/debug.sh'
++++ bash_annotations_trap_controller
+++ var='# import util/utility.sh interfaces/inject.sh annotations/functions/ignore.sh annotations/functions/debug.sh'
++++ bash_annotations_trap_controller
+++ echo '# import util/utility.sh interfaces/inject.sh annotations/functions/ignore.sh annotations/functions/debug.sh'
++ line='# import util/utility.sh interfaces/inject.sh annotations/functions/ignore.sh annotations/functions/debug.sh'
+++ bash_annotations_trap_controller
++ [[ 6 -eq 14 ]]
+++ bash_annotations_trap_controller
++ [[ # import util/utility.sh interfaces/inject.sh annotations/functions/ignore.sh annotations/functions/debug.sh =~ ^\s*[a-zA-Z0-9_-]+= ]]
+++ bash_annotations_trap_controller
++ [[ # import util/utility.sh interfaces/inject.sh annotations/functions/ignore.sh annotations/functions/debug.sh =~ ^(declare|local)\s*(-[gaAilnrtux]+)?\s*[a-zA-Z0-9_-]+\s*$ ]]
+++ bash_annotations_trap_controller
++ [[ # import util/utility.sh interfaces/inject.sh annotations/functions/ignore.sh annotations/functions/debug.sh =~ ^(declare|local)\s*(-[gaAilnrtux]+)?\s*[a-zA-Z0-9_-]+= ]]
+++ bash_annotations_trap_controller
++ [[ # import util/utility.sh interfaces/inject.sh annotations/functions/ignore.sh annotations/functions/debug.sh =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ # import util/utility.sh interfaces/inject.sh annotations/functions/ignore.sh annotations/functions/debug.sh =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ false == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ ((  counter >= (line_start + 1)  ))
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '# import util/types.sh'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=# import util/types.sh'
++++ bash_annotations_trap_controller
+++ var='# import util/types.sh'
++++ bash_annotations_trap_controller
+++ var='# import util/types.sh'
++++ bash_annotations_trap_controller
+++ echo '# import util/types.sh'
++ line='# import util/types.sh'
+++ bash_annotations_trap_controller
++ [[ 7 -eq 14 ]]
+++ bash_annotations_trap_controller
++ [[ # import util/types.sh =~ ^\s*[a-zA-Z0-9_-]+= ]]
+++ bash_annotations_trap_controller
++ [[ # import util/types.sh =~ ^(declare|local)\s*(-[gaAilnrtux]+)?\s*[a-zA-Z0-9_-]+\s*$ ]]
+++ bash_annotations_trap_controller
++ [[ # import util/types.sh =~ ^(declare|local)\s*(-[gaAilnrtux]+)?\s*[a-zA-Z0-9_-]+= ]]
+++ bash_annotations_trap_controller
++ [[ # import util/types.sh =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ # import util/types.sh =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ false == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ ((  counter >= (line_start + 1)  ))
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim 'import annotations/variables/element_type.sh'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=import annotations/variables/element_type.sh'
++++ bash_annotations_trap_controller
+++ var='import annotations/variables/element_type.sh'
++++ bash_annotations_trap_controller
+++ var='import annotations/variables/element_type.sh'
++++ bash_annotations_trap_controller
+++ echo 'import annotations/variables/element_type.sh'
++ line='import annotations/variables/element_type.sh'
+++ bash_annotations_trap_controller
++ [[ 8 -eq 14 ]]
+++ bash_annotations_trap_controller
++ [[ import annotations/variables/element_type.sh =~ ^\s*[a-zA-Z0-9_-]+= ]]
+++ bash_annotations_trap_controller
++ [[ import annotations/variables/element_type.sh =~ ^(declare|local)\s*(-[gaAilnrtux]+)?\s*[a-zA-Z0-9_-]+\s*$ ]]
+++ bash_annotations_trap_controller
++ [[ import annotations/variables/element_type.sh =~ ^(declare|local)\s*(-[gaAilnrtux]+)?\s*[a-zA-Z0-9_-]+= ]]
+++ bash_annotations_trap_controller
++ [[ import annotations/variables/element_type.sh =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ import annotations/variables/element_type.sh =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ ((  counter >= (line_start + 1)  ))
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim 'import annotations/functions/timer.sh'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=import annotations/functions/timer.sh'
++++ bash_annotations_trap_controller
+++ var='import annotations/functions/timer.sh'
++++ bash_annotations_trap_controller
+++ var='import annotations/functions/timer.sh'
++++ bash_annotations_trap_controller
+++ echo 'import annotations/functions/timer.sh'
++ line='import annotations/functions/timer.sh'
+++ bash_annotations_trap_controller
++ [[ 9 -eq 14 ]]
+++ bash_annotations_trap_controller
++ [[ import annotations/functions/timer.sh =~ ^\s*[a-zA-Z0-9_-]+= ]]
+++ bash_annotations_trap_controller
++ [[ import annotations/functions/timer.sh =~ ^(declare|local)\s*(-[gaAilnrtux]+)?\s*[a-zA-Z0-9_-]+\s*$ ]]
+++ bash_annotations_trap_controller
++ [[ import annotations/functions/timer.sh =~ ^(declare|local)\s*(-[gaAilnrtux]+)?\s*[a-zA-Z0-9_-]+= ]]
+++ bash_annotations_trap_controller
++ [[ import annotations/functions/timer.sh =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ import annotations/functions/timer.sh =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ ((  counter >= (line_start + 1)  ))
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim ''
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local var=
++++ bash_annotations_trap_controller
+++ var=
++++ bash_annotations_trap_controller
+++ var=
++++ bash_annotations_trap_controller
+++ echo ''
++ line=
+++ bash_annotations_trap_controller
++ [[ 10 -eq 14 ]]
+++ bash_annotations_trap_controller
++ [[ '' =~ ^\s*[a-zA-Z0-9_-]+= ]]
+++ bash_annotations_trap_controller
++ [[ '' =~ ^(declare|local)\s*(-[gaAilnrtux]+)?\s*[a-zA-Z0-9_-]+\s*$ ]]
+++ bash_annotations_trap_controller
++ [[ '' =~ ^(declare|local)\s*(-[gaAilnrtux]+)?\s*[a-zA-Z0-9_-]+= ]]
+++ bash_annotations_trap_controller
++ [[ '' =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ '' =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ ((  counter >= (line_start + 1)  ))
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '#export PS4='\''\nDEBUG level:$SHLVL subshell-level: $BASH_SUBSHELL \nsource-file:${BASH_SOURCE} line#:${LINENO} function:${FUNCNAME[0]:+${FUNCNAME[0]}(): }\nstatement: '\'''
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=#export PS4='\''\nDEBUG level:$SHLVL subshell-level: $BASH_SUBSHELL \nsource-file:${BASH_SOURCE} line#:${LINENO} function:${FUNCNAME[0]:+${FUNCNAME[0]}(): }\nstatement: '\'''
++++ bash_annotations_trap_controller
+++ var='#export PS4='\''\nDEBUG level:$SHLVL subshell-level: $BASH_SUBSHELL \nsource-file:${BASH_SOURCE} line#:${LINENO} function:${FUNCNAME[0]:+${FUNCNAME[0]}(): }\nstatement: '\'''
++++ bash_annotations_trap_controller
+++ var='#export PS4='\''\nDEBUG level:$SHLVL subshell-level: $BASH_SUBSHELL \nsource-file:${BASH_SOURCE} line#:${LINENO} function:${FUNCNAME[0]:+${FUNCNAME[0]}(): }\nstatement: '\'''
++++ bash_annotations_trap_controller
+++ echo '#export PS4='\''\nDEBUG level:$SHLVL subshell-level: $BASH_SUBSHELL \nsource-file:${BASH_SOURCE} line#:${LINENO} function:${FUNCNAME[0]:+${FUNCNAME[0]}(): }\nstatement: '\'''
++ line='#export PS4='\''\nDEBUG level:$SHLVL subshell-level: $BASH_SUBSHELL \nsource-file:${BASH_SOURCE} line#:${LINENO} function:${FUNCNAME[0]:+${FUNCNAME[0]}(): }\nstatement: '\'''
+++ bash_annotations_trap_controller
++ [[ 11 -eq 14 ]]
+++ bash_annotations_trap_controller
++ [[ #export PS4='\nDEBUG level:$SHLVL subshell-level: $BASH_SUBSHELL \nsource-file:${BASH_SOURCE} line#:${LINENO} function:${FUNCNAME[0]:+${FUNCNAME[0]}(): }\nstatement: ' =~ ^\s*[a-zA-Z0-9_-]+= ]]
+++ bash_annotations_trap_controller
++ [[ #export PS4='\nDEBUG level:$SHLVL subshell-level: $BASH_SUBSHELL \nsource-file:${BASH_SOURCE} line#:${LINENO} function:${FUNCNAME[0]:+${FUNCNAME[0]}(): }\nstatement: ' =~ ^(declare|local)\s*(-[gaAilnrtux]+)?\s*[a-zA-Z0-9_-]+\s*$ ]]
+++ bash_annotations_trap_controller
++ [[ #export PS4='\nDEBUG level:$SHLVL subshell-level: $BASH_SUBSHELL \nsource-file:${BASH_SOURCE} line#:${LINENO} function:${FUNCNAME[0]:+${FUNCNAME[0]}(): }\nstatement: ' =~ ^(declare|local)\s*(-[gaAilnrtux]+)?\s*[a-zA-Z0-9_-]+= ]]
+++ bash_annotations_trap_controller
++ [[ #export PS4='\nDEBUG level:$SHLVL subshell-level: $BASH_SUBSHELL \nsource-file:${BASH_SOURCE} line#:${LINENO} function:${FUNCNAME[0]:+${FUNCNAME[0]}(): }\nstatement: ' =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ #export PS4='\nDEBUG level:$SHLVL subshell-level: $BASH_SUBSHELL \nsource-file:${BASH_SOURCE} line#:${LINENO} function:${FUNCNAME[0]:+${FUNCNAME[0]}(): }\nstatement: ' =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ [[ false == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++ ((  counter >= (line_start + 1)  ))
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim ''
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local var=
++++ bash_annotations_trap_controller
+++ var=
++++ bash_annotations_trap_controller
+++ var=
++++ bash_annotations_trap_controller
+++ echo ''
++ line=
+++ bash_annotations_trap_controller
++ [[ 12 -eq 14 ]]
+++ bash_annotations_trap_controller
++ [[ '' =~ ^\s*[a-zA-Z0-9_-]+= ]]
+++ bash_annotations_trap_controller
++ [[ '' =~ ^(declare|local)\s*(-[gaAilnrtux]+)?\s*[a-zA-Z0-9_-]+\s*$ ]]
+++ bash_annotations_trap_controller
++ [[ '' =~ ^(declare|local)\s*(-[gaAilnrtux]+)?\s*[a-zA-Z0-9_-]+= ]]
+++ bash_annotations_trap_controller
++ [[ '' =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ '' =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ ((  counter >= (line_start + 1)  ))
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim 'parameters() {'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=parameters() {'
++++ bash_annotations_trap_controller
+++ var='parameters() {'
++++ bash_annotations_trap_controller
+++ var='parameters() {'
++++ bash_annotations_trap_controller
+++ echo 'parameters() {'
++ line='parameters() {'
+++ bash_annotations_trap_controller
++ [[ 13 -eq 14 ]]
+++ bash_annotations_trap_controller
++ [[ parameters() { =~ ^\s*[a-zA-Z0-9_-]+= ]]
+++ bash_annotations_trap_controller
++ [[ parameters() { =~ ^(declare|local)\s*(-[gaAilnrtux]+)?\s*[a-zA-Z0-9_-]+\s*$ ]]
+++ bash_annotations_trap_controller
++ [[ parameters() { =~ ^(declare|local)\s*(-[gaAilnrtux]+)?\s*[a-zA-Z0-9_-]+= ]]
+++ bash_annotations_trap_controller
++ [[ parameters() { =~ ^\s*@[a-zA-Z:./_-]+\s*.*[\r\n]?$ ]]
+++ bash_annotations_trap_controller
++ [[ parameters() { =~ ^\s*#.*$ ]]
+++ bash_annotations_trap_controller
++ ((  counter >= (line_start + 1)  ))
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '    @element_type STRING'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=    @element_type STRING'
++++ bash_annotations_trap_controller
+++ var='@element_type STRING'
++++ bash_annotations_trap_controller
+++ var='@element_type STRING'
++++ bash_annotations_trap_controller
+++ echo '@element_type STRING'
++ line='@element_type STRING'
+++ bash_annotations_trap_controller
++ [[ 14 -eq 14 ]]
+++ bash_annotations_trap_controller
++ [[ @element_type == \@\e\l\e\m\e\n\t\_\t\y\p\e ]]
+++ bash_annotations_trap_controller
++ start=true
+++ bash_annotations_trap_controller
++ continue
+++ bash_annotations_trap_controller
++ IFS=
++ read -r line
+++ bash_annotations_trap_controller
++ (( counter++ ))
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim '    local string="${1}"'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=    local string="${1}"'
++++ bash_annotations_trap_controller
+++ var='local string="${1}"'
++++ bash_annotations_trap_controller
+++ var='local string="${1}"'
++++ bash_annotations_trap_controller
+++ echo 'local string="${1}"'
++ line='local string="${1}"'
+++ bash_annotations_trap_controller
++ [[ 15 -eq 14 ]]
+++ bash_annotations_trap_controller
++ [[ local string="${1}" =~ ^\s*[a-zA-Z0-9_-]+= ]]
+++ bash_annotations_trap_controller
++ [[ local string="${1}" =~ ^(declare|local)\s*(-[gaAilnrtux]+)?\s*[a-zA-Z0-9_-]+\s*$ ]]
+++ bash_annotations_trap_controller
++ [[ local string="${1}" =~ ^(declare|local)\s*(-[gaAilnrtux]+)?\s*[a-zA-Z0-9_-]+= ]]
+++ bash_annotations_trap_controller
++ [[ true == \t\r\u\e ]]
+++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ trim 'local string="${1}"'
++++ bash_annotations_trap_controller
++++ bash_annotations_trap_controller
+++ local 'var=local string="${1}"'
++++ bash_annotations_trap_controller
+++ var='local string="${1}"'
++++ bash_annotations_trap_controller
+++ var='local string="${1}"'
++++ bash_annotations_trap_controller
+++ echo 'local string="${1}"'
++ match='local string="${1}"'
+++ bash_annotations_trap_controller
++ match='string="${1}"'
+++ bash_annotations_trap_controller
++ match=string
+++ bash_annotations_trap_controller
++ echo string
+++ bash_annotations_trap_controller
++ return 0
+ local annotated_variable=string
++ bash_annotations_trap_controller
+ [[ -n string ]]
++ bash_annotations_trap_controller
+ builtin source /dev/fd/999
++ bash_annotations_trap_controller
+ BASH_ANNOTATIONS_FUNCTION_ARRAY+=("${function_namespace}")
++ bash_annotations_trap_controller
++ for func in "${BASH_ANNOTATIONS_FUNCTION_ARRAY[@]}"
++ type -t @element_type_14
++ @element_type_14
++ invoke_variable_annotation_pre string
++ local target_variable=string
++ [[ local string="${1}" == *\$\s\t\r\i\n\g* ]]
++ [[ local string="${1}" == *\$\{\s\t\r\i\n\g* ]]
++ [[ local string="${1}" == *\$\{\s\t\r\i\n\g\[\@\]\}* ]]
++ [[ local string="${1}" == *\$\{\s\t\r\i\n\g\[\*\]\}* ]]
++ return 1
+ local string=HELLO
++ bash_annotations_trap_controller
++ for func in "${BASH_ANNOTATIONS_FUNCTION_ARRAY[@]}"
++ type -t @element_type_14
++ @element_type_14
++ invoke_variable_annotation_pre string
++ local target_variable=string
++ [[ echo ${string} == *\$\s\t\r\i\n\g* ]]
++ [[ echo ${string} == *\$\{\s\t\r\i\n\g* ]]
++ return 0
++ local type_assertion=STRING
++ check_type string STRING
++ local type=string
++ local type_assertion=STRING
++ _check_variable_type string STRING
++ local variable=string
++ local type_assertion=STRING
+++ declare -p string
++ local 'type_signature=declare -- string="HELLO"'
++ [[ declare -- string="HELLO" =~ -- ]]
++ [[ STRING == \S\T\R\I\N\G ]]
++ return 0
+ echo HELLO
++ bash_annotations_trap_controller
++ for func in "${BASH_ANNOTATIONS_FUNCTION_ARRAY[@]}"
++ type -t @element_type_14
++ @element_type_14
++ invoke_variable_annotation_pre string
++ local target_variable=string
++ [[ pwd 1>&2 > /dev/null == *\$\s\t\r\i\n\g* ]]
++ [[ pwd 1>&2 > /dev/null == *\$\{\s\t\r\i\n\g* ]]
++ [[ pwd 1>&2 > /dev/null == *\$\{\s\t\r\i\n\g\[\@\]\}* ]]
++ [[ pwd 1>&2 > /dev/null == *\$\{\s\t\r\i\n\g\[\*\]\}* ]]
++ return 1
+ pwd
++ bash_annotations_trap_controller
++ for func in "${BASH_ANNOTATIONS_FUNCTION_ARRAY[@]}"
++ type -t @element_type_14
++ @element_type_14
++ invoke_variable_annotation_pre string
++ local target_variable=string
++ [[ pwd 1>&2 > /dev/null == *\$\s\t\r\i\n\g* ]]
++ [[ pwd 1>&2 > /dev/null == *\$\{\s\t\r\i\n\g* ]]
++ [[ pwd 1>&2 > /dev/null == *\$\{\s\t\r\i\n\g\[\@\]\}* ]]
++ [[ pwd 1>&2 > /dev/null == *\$\{\s\t\r\i\n\g\[\*\]\}* ]]
++ return 1
+ pwd
++ bash_annotations_trap_controller
++ for func in "${BASH_ANNOTATIONS_FUNCTION_ARRAY[@]}"
++ type -t @element_type_14
++ @element_type_14
++ invoke_variable_annotation_pre string
++ local target_variable=string
++ [[ pwd 1>&2 > /dev/null == *\$\s\t\r\i\n\g* ]]
++ [[ pwd 1>&2 > /dev/null == *\$\{\s\t\r\i\n\g* ]]
++ [[ pwd 1>&2 > /dev/null == *\$\{\s\t\r\i\n\g\[\@\]\}* ]]
++ [[ pwd 1>&2 > /dev/null == *\$\{\s\t\r\i\n\g\[\*\]\}* ]]
++ return 1
+ pwd
